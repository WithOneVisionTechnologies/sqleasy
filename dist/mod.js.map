{
  "version": 3,
  "sources": ["../enums/builder_type.ts", "../enums/join_type.ts", "../enums/order_by_direction.ts", "../enums/where_operator.ts", "../state/sqleasy_state.ts", "../builder/default_builder.ts", "../enums/join_on_operator.ts", "../enums/join_operator.ts", "../builder/default_join_on_builder.ts", "../enums/multi_builder_transaction_state.ts", "../builder/default_multi_builder.ts", "../configuration/configuration_delimiters.ts", "../configuration/runtime_configuration.ts", "../enums/database_type.ts", "../enums/datatype.ts", "../enums/parser_mode.ts", "https://jsr.io/@withonevision/is-helper/1.0.6/is-helper.ts", "https://jsr.io/@withonevision/string-builder/1.0.0/string-builder.ts", "../helpers/sql_helper.ts", "../helpers/parser_error.ts", "../sqleasy/mssql/mssql_join_on_builder.ts", "../parser/default_from.ts", "../parser/default_join.ts", "../parser/default_limit_offset.ts", "../parser/default_order_by.ts", "../parser/default_select.ts", "../parser/default_where.ts", "../parser/default_to_sql.ts", "../parser/default_parser.ts", "../sqleasy/mssql/mssql_parser.ts", "../sqleasy/mssql/mssql_builder.ts", "../sqleasy/mssql/mssql_configuration.ts", "../sqleasy/mssql/mssql_multi_builder.ts", "../sqleasy/mssql/mssql_sqleasy.ts", "../sqleasy/mysql/mysql_join_on_builder.ts", "../sqleasy/mysql/mysql_parser.ts", "../sqleasy/mysql/mysql_builder.ts", "../sqleasy/mysql/mysql_configuration.ts", "../sqleasy/mysql/mysql_multi_builder.ts", "../sqleasy/mysql/mysql_sqleasy.ts", "../sqleasy/postgres/postgres_join_on_builder.ts", "../sqleasy/postgres/postgres_parser.ts", "../sqleasy/postgres/postgres_builder.ts", "../sqleasy/postgres/postgres_configuration.ts", "../sqleasy/postgres/postgres_multi_builder.ts", "../sqleasy/postgres/postgres_sqleasy.ts", "../state/from_state.ts", "../state/join_on_state.ts", "../state/join_state.ts", "../state/order_by_state.ts", "../state/select_state.ts", "../state/where_state.ts"],
  "sourcesContent": ["export enum BuilderType {\n   And,\n   FromBuilder,\n   FromTable,\n   FromRaw,\n   JoinBuilder,\n   JoinRaw,\n   JoinTable,\n   None,\n   Or,\n   OrderByColumn,\n   OrderByRaw,\n   SelectAll,\n   SelectBuilder,\n   SelectColumn,\n   SelectRaw,\n   Where,\n   WhereBetween,\n   WhereGroupBegin,\n   WhereGroupBuilder,\n   WhereGroupEnd,\n   WhereExistsBuilder,\n   WhereInBuilder,\n   WhereInValues,\n   WhereNotExistsBuilder,\n   WhereNotInBuilder,\n   WhereNotInValues,\n   WhereNotNull,\n   WhereNull,\n   WhereRaw,\n}\n", "export enum JoinType {\n   Inner,\n   Left,\n   LeftOuter,\n   Right,\n   RightOuter,\n   FullOuter,\n   Cross,\n   None,\n}\n", "export enum OrderByDirection {\n   Ascending,\n   Descending,\n   None,\n}\n", "export enum WhereOperator {\n   Equals,\n   NotEquals,\n   GreaterThan,\n   GreaterThanOrEquals,\n   LessThan,\n   LessThanOrEquals,\n   None,\n}\n", "import type { FromState } from \"./from_state.ts\";\nimport type { JoinState } from \"./join_state.ts\";\nimport type { OrderByState } from \"./order_by_state.ts\";\nimport type { SelectState } from \"./select_state.ts\";\nimport type { WhereState } from \"./where_state.ts\";\n\nexport class SqlEasyState {\n   builderName: string = \"\";\n   fromStates: FromState[] = [];\n   joinStates: JoinState[] = [];\n   whereStates: WhereState[] = [];\n   orderByStates: OrderByState[] = [];\n   selectStates: SelectState[] = [];\n   isInnerStatement: boolean = false;\n   limit: number = 0;\n   offset: number = 0;\n   distinct: boolean = false;\n   customState: any | undefined = undefined;\n}\n", "import type { IConfiguration } from \"../configuration/interface_configuration.ts\";\nimport { BuilderType } from \"../enums/builder_type.ts\";\nimport { JoinType } from \"../enums/join_type.ts\";\nimport { OrderByDirection } from \"../enums/order_by_direction.ts\";\nimport { WhereOperator } from \"../enums/where_operator.ts\";\nimport type { IParser } from \"../parser/interface_parser.ts\";\nimport { SqlEasyState } from \"../state/sqleasy_state.ts\";\nimport type { IBuilder } from \"./interface_builder.ts\";\nimport type { IJoinOnBuilder } from \"./interface_join_on_builder.ts\";\n\nexport abstract class DefaultBuilder<\n   T extends IBuilder<T, U, V>,\n   U extends IJoinOnBuilder<U>,\n   V extends IParser,\n> implements IBuilder<T, U, V> {\n   private _sqlEasyState: SqlEasyState = new SqlEasyState();\n   private _config: IConfiguration;\n\n   constructor(config: IConfiguration) {\n      this._config = config;\n   }\n\n   public abstract newBuilder(): T;\n   public abstract newJoinOnBuilder(): U;\n   public abstract newParser(): V;\n\n   public and = (): T => {\n      this._sqlEasyState.whereStates.push({\n         builderType: BuilderType.And,\n         tableNameOrAlias: undefined,\n         columnName: undefined,\n         whereOperator: WhereOperator.None,\n         raw: undefined,\n         sqlEasyState: undefined,\n         values: [],\n      });\n\n      return this as unknown as T;\n   };\n\n   public clearAll = (): T => {\n      this._sqlEasyState = new SqlEasyState();\n      return this as unknown as T;\n   };\n\n   public clearFrom = (): T => {\n      this._sqlEasyState.fromStates = [];\n      return this as unknown as T;\n   };\n\n   public clearJoin = (): T => {\n      this._sqlEasyState.joinStates = [];\n      return this as unknown as T;\n   };\n\n   public clearLimit = (): T => {\n      this._sqlEasyState.limit = 0;\n      return this as unknown as T;\n   };\n\n   public clearOffset = (): T => {\n      this._sqlEasyState.offset = 0;\n      return this as unknown as T;\n   };\n\n   public clearOrderBy = (): T => {\n      this._sqlEasyState.orderByStates = [];\n      return this as unknown as T;\n   };\n\n   public clearSelect = (): T => {\n      this._sqlEasyState.selectStates = [];\n      return this as unknown as T;\n   };\n\n   public clearWhere = (): T => {\n      this._sqlEasyState.whereStates = [];\n      return this as unknown as T;\n   };\n\n   public distinct = (): T => {\n      this._sqlEasyState.distinct = true;\n      return this as unknown as T;\n   };\n\n   public fromRaw = (rawFrom: string): T => {\n      this._sqlEasyState.fromStates.push({\n         builderType: BuilderType.FromRaw,\n         owner: undefined,\n         tableName: undefined,\n         alias: undefined,\n         sqlEasyState: undefined,\n         raw: rawFrom,\n      });\n      return this as unknown as T;\n   };\n\n   public fromRaws = (rawFroms: string[]): T => {\n      rawFroms.forEach((rawFrom) => {\n         this.fromRaw(rawFrom);\n      });\n      return this as unknown as T;\n   };\n\n   public fromTable = (tableName: string, alias: string): T => {\n      this._sqlEasyState.fromStates.push({\n         builderType: BuilderType.FromTable,\n         owner: this._config.defaultOwner(),\n         tableName: tableName,\n         alias: alias,\n         sqlEasyState: undefined,\n         raw: undefined,\n      });\n      return this as unknown as T;\n   };\n\n   public fromTables = (tables: { tableName: string; alias: string }[]): T => {\n      tables.forEach((table) => {\n         this.fromTable(table.tableName, table.alias);\n      });\n      return this as unknown as T;\n   };\n\n   public fromTableWithOwner = (\n      owner: string,\n      tableName: string,\n      alias: string,\n   ): T => {\n      this._sqlEasyState.fromStates.push({\n         builderType: BuilderType.FromTable,\n         owner: owner,\n         tableName: tableName,\n         alias: alias,\n         sqlEasyState: undefined,\n         raw: undefined,\n      });\n      return this as unknown as T;\n   };\n\n   public fromTablesWithOwner = (\n      tables: { owner: string; tableName: string; alias: string }[],\n   ): T => {\n      tables.forEach((table) => {\n         this.fromTableWithOwner(table.owner, table.tableName, table.alias);\n      });\n      return this as unknown as T;\n   };\n\n   public fromWithBuilder = (\n      alias: string,\n      builder: (builder: T) => void,\n   ): T => {\n      const newBuilder = this.newBuilder();\n      builder(newBuilder);\n      newBuilder.state().isInnerStatement = true;\n\n      this._sqlEasyState.fromStates.push({\n         builderType: BuilderType.FromBuilder,\n         owner: undefined,\n         tableName: undefined,\n         alias: alias,\n         sqlEasyState: newBuilder.state(),\n         raw: undefined,\n      });\n\n      return this as unknown as T;\n   };\n\n   public joinRaw = (rawJoin: string): T => {\n      this._sqlEasyState.joinStates.push({\n         builderType: BuilderType.JoinRaw,\n         joinType: JoinType.None,\n         owner: undefined,\n         tableName: undefined,\n         alias: undefined,\n         sqlEasyState: undefined,\n         raw: rawJoin,\n         joinOnStates: [],\n      });\n\n      return this as unknown as T;\n   };\n\n   public joinRaws = (rawJoins: string[]): T => {\n      rawJoins.forEach((rawJoin) => {\n         this.joinRaw(rawJoin);\n      });\n\n      return this as unknown as T;\n   };\n\n   public joinTable = (\n      joinType: JoinType,\n      tableName: string,\n      alias: string,\n      joinOnBuilder: (joinOnBuilder: U) => void,\n   ): T => {\n      const joinOnBuilderInstance = this.newJoinOnBuilder();\n      joinOnBuilder(joinOnBuilderInstance);\n\n      this._sqlEasyState.joinStates.push({\n         builderType: BuilderType.JoinTable,\n         joinType: joinType,\n         owner: this._config.defaultOwner(),\n         tableName: tableName,\n         alias: alias,\n         sqlEasyState: undefined,\n         raw: undefined,\n         joinOnStates: joinOnBuilderInstance.states(),\n      });\n\n      return this as unknown as T;\n   };\n\n   public joinTables = (\n      joins: {\n         joinType: JoinType;\n         tableName: string;\n         alias: string;\n         joinOnBuilder: (joinOnBuilder: U) => void;\n      }[],\n   ): T => {\n      for (const join of joins) {\n         this.joinTable(\n            join.joinType,\n            join.tableName,\n            join.alias,\n            join.joinOnBuilder,\n         );\n      }\n      return this as unknown as T;\n   };\n\n   public joinTablesWithOwner = (\n      joins: {\n         joinType: JoinType;\n         owner: string;\n         tableName: string;\n         alias: string;\n         joinOnBuilder: (joinOnBuilder: U) => void;\n      }[],\n   ): T => {\n      for (const join of joins) {\n         this.joinTableWithOwner(\n            join.joinType,\n            join.owner,\n            join.tableName,\n            join.alias,\n            join.joinOnBuilder,\n         );\n      }\n      return this as unknown as T;\n   };\n\n   public joinTableWithOwner = (\n      joinType: JoinType,\n      owner: string,\n      tableName: string,\n      alias: string,\n      joinOnBuilder: (joinOnBuilder: U) => void,\n   ): T => {\n      const joinOnBuilderInstance = this.newJoinOnBuilder();\n      joinOnBuilder(joinOnBuilderInstance);\n\n      this._sqlEasyState.joinStates.push({\n         builderType: BuilderType.JoinTable,\n         joinType: joinType,\n         owner: owner,\n         tableName: tableName,\n         alias: alias,\n         sqlEasyState: undefined,\n         raw: undefined,\n         joinOnStates: joinOnBuilderInstance.states(),\n      });\n\n      return this as unknown as T;\n   };\n\n   public joinWithBuilder = (\n      joinType: JoinType,\n      alias: string,\n      builder: (builder: T) => void,\n      joinOnBuilder: (joinOnBuilder: U) => void,\n   ): T => {\n      const newBuilder = this.newBuilder();\n\n      builder(newBuilder);\n      newBuilder.state().isInnerStatement = true;\n\n      const newJoinOnBuilder = this.newJoinOnBuilder();\n      joinOnBuilder(newJoinOnBuilder);\n\n      this._sqlEasyState.joinStates.push({\n         builderType: BuilderType.JoinBuilder,\n         joinType: joinType,\n         owner: undefined,\n         tableName: undefined,\n         alias: alias,\n         sqlEasyState: newBuilder.state(),\n         raw: undefined,\n         joinOnStates: newJoinOnBuilder.states(),\n      });\n\n      return this as unknown as T;\n   };\n\n   public limit = (limit: number): T => {\n      this._sqlEasyState.limit = limit;\n      return this as unknown as T;\n   };\n\n   public offset = (offset: number): T => {\n      this._sqlEasyState.offset = offset;\n      return this as unknown as T;\n   };\n\n   public or = (): T => {\n      this._sqlEasyState.whereStates.push({\n         builderType: BuilderType.Or,\n         tableNameOrAlias: undefined,\n         columnName: undefined,\n         whereOperator: WhereOperator.None,\n         raw: undefined,\n         sqlEasyState: undefined,\n         values: [],\n      });\n\n      return this as unknown as T;\n   };\n\n   public orderByColumn = (\n      tableNameOrAlias: string,\n      columnName: string,\n      direction: OrderByDirection,\n   ): T => {\n      this._sqlEasyState.orderByStates.push({\n         builderType: BuilderType.OrderByColumn,\n         tableNameOrAlias: tableNameOrAlias,\n         columnName: columnName,\n         direction: direction,\n         raw: undefined,\n      });\n\n      return this as unknown as T;\n   };\n\n   public orderByColumns = (\n      columns: {\n         tableNameOrAlias: string;\n         columnName: string;\n         direction: OrderByDirection;\n      }[],\n   ): T => {\n      columns.forEach((column) => {\n         this.orderByColumn(\n            column.tableNameOrAlias,\n            column.columnName,\n            column.direction,\n         );\n      });\n\n      return this as unknown as T;\n   };\n\n   public orderByRaw = (rawOrderBy: string): T => {\n      this._sqlEasyState.orderByStates.push({\n         builderType: BuilderType.OrderByRaw,\n         tableNameOrAlias: undefined,\n         columnName: undefined,\n         direction: OrderByDirection.Ascending,\n         raw: rawOrderBy,\n      });\n\n      return this as unknown as T;\n   };\n\n   public orderByRaws = (rawOrderBys: string[]): T => {\n      rawOrderBys.forEach((rawOrderBy) => {\n         this.orderByRaw(rawOrderBy);\n      });\n\n      return this as unknown as T;\n   };\n\n   public parse = (): string => {\n      const parser = this.newParser();\n      return parser.toSql(this.state());\n   };\n\n   public parseRaw = (): string => {\n      const parser = this.newParser();\n      return parser.toSqlRaw(this.state());\n   };\n\n   public selectAll = (): T => {\n      this._sqlEasyState.selectStates.push({\n         builderType: BuilderType.SelectAll,\n         tableNameOrAlias: undefined,\n         columnName: undefined,\n         alias: undefined,\n         sqlEasyState: undefined,\n         raw: undefined,\n      });\n\n      return this as unknown as T;\n   };\n\n   public selectColumn = (\n      tableNameOrAlias: string,\n      columnName: string,\n      columnAlias: string,\n   ): T => {\n      this._sqlEasyState.selectStates.push({\n         builderType: BuilderType.SelectColumn,\n         tableNameOrAlias: tableNameOrAlias,\n         columnName: columnName,\n         alias: columnAlias,\n         sqlEasyState: undefined,\n         raw: undefined,\n      });\n\n      return this as unknown as T;\n   };\n\n   public selectColumns = (\n      columns: {\n         tableNameOrAlias: string;\n         columnName: string;\n         columnAlias: string;\n      }[],\n   ): T => {\n      columns.forEach((column) => {\n         this.selectColumn(\n            column.tableNameOrAlias,\n            column.columnName,\n            column.columnAlias,\n         );\n      });\n\n      return this as unknown as T;\n   };\n\n   public selectRaw = (rawSelect: string): T => {\n      this._sqlEasyState.selectStates.push({\n         builderType: BuilderType.SelectRaw,\n         tableNameOrAlias: undefined,\n         columnName: undefined,\n         alias: undefined,\n         sqlEasyState: undefined,\n         raw: rawSelect,\n      });\n\n      return this as unknown as T;\n   };\n\n   public selectRaws = (rawSelects: string[]): T => {\n      rawSelects.forEach((rawSelect) => {\n         this.selectRaw(rawSelect);\n      });\n\n      return this as unknown as T;\n   };\n\n   public selectWithBuilder = (\n      alias: string,\n      builder: (builder: T) => void,\n   ): T => {\n      const newBuilder = this.newBuilder();\n\n      builder(newBuilder);\n      newBuilder.state().isInnerStatement = true;\n\n      this._sqlEasyState.selectStates.push({\n         builderType: BuilderType.SelectBuilder,\n         tableNameOrAlias: undefined,\n         columnName: undefined,\n         alias: alias,\n         sqlEasyState: newBuilder.state(),\n         raw: undefined,\n      });\n\n      return this as unknown as T;\n   };\n\n   public state = (): SqlEasyState => {\n      return this._sqlEasyState;\n   };\n\n   public where = (\n      tableNameOrAlias: string,\n      columnName: string,\n      whereOperator: WhereOperator,\n      value: any,\n   ): T => {\n      this._sqlEasyState.whereStates.push({\n         builderType: BuilderType.Where,\n         tableNameOrAlias: tableNameOrAlias,\n         columnName: columnName,\n         whereOperator: whereOperator,\n         raw: undefined,\n         sqlEasyState: undefined,\n         values: [value],\n      });\n\n      return this as unknown as T;\n   };\n\n   public whereBetween = (\n      tableNameOrAlias: string,\n      columnName: string,\n      value1: any,\n      value2: any,\n   ): T => {\n      this._sqlEasyState.whereStates.push({\n         builderType: BuilderType.WhereBetween,\n         tableNameOrAlias: tableNameOrAlias,\n         columnName: columnName,\n         whereOperator: WhereOperator.Equals,\n         raw: undefined,\n         sqlEasyState: undefined,\n         values: [value1, value2],\n      });\n\n      return this as unknown as T;\n   };\n\n   public whereExistsWithBuilder = (\n      tableNameOrAlias: string,\n      columnName: string,\n      builder: (builder: T) => void,\n   ): T => {\n      const newBuilder = this.newBuilder();\n      builder(newBuilder);\n      newBuilder.state().isInnerStatement = true;\n\n      this._sqlEasyState.whereStates.push({\n         builderType: BuilderType.WhereExistsBuilder,\n         tableNameOrAlias: tableNameOrAlias,\n         columnName: columnName,\n         whereOperator: WhereOperator.None,\n         raw: undefined,\n         sqlEasyState: newBuilder.state(),\n         values: [],\n      });\n\n      return this as unknown as T;\n   };\n\n   public whereGroup(builder: (builder: T) => void): T {\n      this._sqlEasyState.whereStates.push({\n         builderType: BuilderType.WhereGroupBegin,\n         tableNameOrAlias: undefined,\n         columnName: undefined,\n         whereOperator: WhereOperator.None,\n         raw: undefined,\n         values: [],\n         sqlEasyState: undefined,\n      });\n\n      const newBuilder = this.newBuilder();\n      builder(newBuilder);\n      newBuilder.state().isInnerStatement = true;\n\n      this._sqlEasyState.whereStates.push({\n         builderType: BuilderType.WhereGroupBuilder,\n         tableNameOrAlias: undefined,\n         columnName: undefined,\n         whereOperator: WhereOperator.None,\n         raw: undefined,\n         values: [],\n         sqlEasyState: newBuilder.state(),\n      });\n\n      this._sqlEasyState.whereStates.push({\n         builderType: BuilderType.WhereGroupEnd,\n         tableNameOrAlias: \"\",\n         columnName: \"\",\n         whereOperator: WhereOperator.None,\n         raw: \"\",\n         values: [],\n         sqlEasyState: newBuilder.state(),\n      });\n\n      return this as unknown as T;\n   }\n\n   public whereInWithBuilder = (\n      tableNameOrAlias: string,\n      columnName: string,\n      builder: (builder: T) => void,\n   ): T => {\n      const newBuilder = this.newBuilder();\n      builder(newBuilder);\n      newBuilder.state().isInnerStatement = true;\n\n      this._sqlEasyState.whereStates.push({\n         builderType: BuilderType.WhereInBuilder,\n         tableNameOrAlias: tableNameOrAlias,\n         columnName: columnName,\n         whereOperator: WhereOperator.None,\n         raw: undefined,\n         sqlEasyState: newBuilder.state(),\n         values: [],\n      });\n\n      return this as unknown as T;\n   };\n\n   public whereInValues = (\n      tableNameOrAlias: string,\n      columnName: string,\n      values: any[],\n   ): T => {\n      this._sqlEasyState.whereStates.push({\n         builderType: BuilderType.WhereInValues,\n         tableNameOrAlias: tableNameOrAlias,\n         columnName: columnName,\n         whereOperator: WhereOperator.None,\n         raw: undefined,\n         sqlEasyState: undefined,\n         values: values,\n      });\n\n      return this as unknown as T;\n   };\n\n   public whereNotExistsWithBuilder = (\n      tableNameOrAlias: string,\n      columnName: string,\n      builder: (builder: T) => void,\n   ): T => {\n      const newBuilder = this.newBuilder();\n      builder(newBuilder);\n      newBuilder.state().isInnerStatement = true;\n\n      this._sqlEasyState.whereStates.push({\n         builderType: BuilderType.WhereNotExistsBuilder,\n         tableNameOrAlias: tableNameOrAlias,\n         columnName: columnName,\n         whereOperator: WhereOperator.None,\n         raw: undefined,\n         sqlEasyState: newBuilder.state(),\n         values: [],\n      });\n\n      return this as unknown as T;\n   };\n\n   public whereNotInWithBuilder = (\n      tableNameOrAlias: string,\n      columnName: string,\n      builder: (builder: T) => void,\n   ): T => {\n      const newBuilder = this.newBuilder();\n      builder(newBuilder);\n      newBuilder.state().isInnerStatement = true;\n\n      this._sqlEasyState.whereStates.push({\n         builderType: BuilderType.WhereNotInBuilder,\n         tableNameOrAlias: tableNameOrAlias,\n         columnName: columnName,\n         whereOperator: WhereOperator.None,\n         raw: undefined,\n         sqlEasyState: newBuilder.state(),\n         values: [],\n      });\n\n      return this as unknown as T;\n   };\n\n   public whereNotInValues = (\n      tableNameOrAlias: string,\n      columnName: string,\n      values: any[],\n   ): T => {\n      this._sqlEasyState.whereStates.push({\n         builderType: BuilderType.WhereNotInValues,\n         tableNameOrAlias: tableNameOrAlias,\n         columnName: columnName,\n         whereOperator: WhereOperator.None,\n         raw: undefined,\n         sqlEasyState: undefined,\n         values: values,\n      });\n\n      return this as unknown as T;\n   };\n\n   public whereNotNull = (\n      tableNameOrAlias: string,\n      columnName: string,\n   ): T => {\n      this._sqlEasyState.whereStates.push({\n         builderType: BuilderType.WhereNotNull,\n         tableNameOrAlias: tableNameOrAlias,\n         columnName: columnName,\n         whereOperator: WhereOperator.None,\n         raw: undefined,\n         sqlEasyState: undefined,\n         values: [],\n      });\n\n      return this as unknown as T;\n   };\n\n   public whereNull = (tableNameOrAlias: string, columnName: string): T => {\n      this._sqlEasyState.whereStates.push({\n         builderType: BuilderType.WhereNull,\n         tableNameOrAlias: tableNameOrAlias,\n         columnName: columnName,\n         whereOperator: WhereOperator.None,\n         raw: undefined,\n         sqlEasyState: undefined,\n         values: [],\n      });\n\n      return this as unknown as T;\n   };\n\n   public whereRaw = (rawWhere: string): T => {\n      this._sqlEasyState.whereStates.push({\n         builderType: BuilderType.WhereRaw,\n         tableNameOrAlias: undefined,\n         columnName: undefined,\n         whereOperator: WhereOperator.None,\n         raw: rawWhere,\n         sqlEasyState: undefined,\n         values: [],\n      });\n\n      return this as unknown as T;\n   };\n\n   public whereRaws = (rawWheres: string[]): T => {\n      rawWheres.forEach((rawWhere) => {\n         this.whereRaw(rawWhere);\n      });\n\n      return this as unknown as T;\n   };\n}\n", "export enum JoinOnOperator {\n   GroupBegin,\n   GroupEnd,\n   On,\n   Raw,\n   Value,\n   And,\n   Or,\n   None,\n}\n", "export enum JoinOperator {\n   Equals,\n   NotEquals,\n   GreaterThan,\n   GreaterThanOrEquals,\n   LessThan,\n   LessThanOrEquals,\n   None,\n}\n", "import type { IConfiguration } from \"../configuration/interface_configuration.ts\";\nimport { JoinOnOperator } from \"../enums/join_on_operator.ts\";\nimport { JoinOperator } from \"../enums/join_operator.ts\";\nimport type { JoinOnState } from \"../state/join_on_state.ts\";\nimport type { IJoinOnBuilder } from \"./interface_join_on_builder.ts\";\n\nexport abstract class DefaultJoinOnBuilder<T extends IJoinOnBuilder<T>>\n   implements IJoinOnBuilder<T> {\n   private _states: JoinOnState[] = [];\n   private _config: IConfiguration;\n\n   constructor(config: IConfiguration) {\n      this._config = config;\n   }\n\n   public abstract newJoinOnBuilder(): T;\n\n   public and = (): T => {\n      this._states.push({\n         joinOperator: JoinOperator.None,\n         joinOnOperator: JoinOnOperator.And,\n         aliasLeft: undefined,\n         columnLeft: undefined,\n         aliasRight: undefined,\n         columnRight: undefined,\n         raw: undefined,\n         valueRight: undefined,\n      });\n\n      return this as unknown as T;\n   };\n\n   public on = (\n      aliasLeft: string,\n      columnLeft: string,\n      joinOperator: JoinOperator,\n      aliasRight: string,\n      columnRight: string,\n   ): T => {\n      this._states.push({\n         joinOperator,\n         joinOnOperator: JoinOnOperator.On,\n         aliasLeft,\n         columnLeft,\n         aliasRight,\n         columnRight,\n         raw: undefined,\n         valueRight: undefined,\n      });\n\n      return this as unknown as T;\n   };\n\n   public onGroup = (builder: (builder: T) => void): T => {\n      this._states.push({\n         joinOperator: JoinOperator.None,\n         joinOnOperator: JoinOnOperator.GroupBegin,\n         aliasLeft: undefined,\n         columnLeft: undefined,\n         aliasRight: undefined,\n         columnRight: undefined,\n         raw: undefined,\n         valueRight: undefined,\n      });\n\n      const newBuilder = this.newJoinOnBuilder();\n      builder(newBuilder);\n\n      this._states.push({\n         joinOperator: JoinOperator.None,\n         joinOnOperator: JoinOnOperator.GroupEnd,\n         aliasLeft: undefined,\n         columnLeft: undefined,\n         aliasRight: undefined,\n         columnRight: undefined,\n         raw: undefined,\n         valueRight: undefined,\n      });\n\n      return this as unknown as T;\n   };\n\n   public onRaw = (raw: string): T => {\n      this._states.push({\n         joinOperator: JoinOperator.None,\n         joinOnOperator: JoinOnOperator.Raw,\n         aliasLeft: undefined,\n         columnLeft: undefined,\n         aliasRight: undefined,\n         columnRight: undefined,\n         raw,\n         valueRight: undefined,\n      });\n      return this as unknown as T;\n   };\n\n   public onValue = (\n      aliasLeft: string,\n      columnLeft: string,\n      joinOperator: JoinOperator,\n      valueRight: any,\n   ): T => {\n      this._states.push({\n         joinOperator,\n         joinOnOperator: JoinOnOperator.Value,\n         aliasLeft,\n         columnLeft,\n         aliasRight: undefined,\n         columnRight: undefined,\n         raw: undefined,\n         valueRight,\n      });\n      return this as unknown as T;\n   };\n\n   public or = (): T => {\n      this._states.push({\n         joinOperator: JoinOperator.None,\n         joinOnOperator: JoinOnOperator.Or,\n         aliasLeft: undefined,\n         columnLeft: undefined,\n         aliasRight: undefined,\n         columnRight: undefined,\n         raw: undefined,\n         valueRight: undefined,\n      });\n\n      return this as unknown as T;\n   };\n\n   public states = (): JoinOnState[] => {\n      return this._states;\n   };\n}\n", "export enum MultiBuilderTransactionState {\n   TransactionOn,\n   TransactionOff,\n   None,\n}\n", "import type { IConfiguration } from \"../configuration/interface_configuration.ts\";\nimport { MultiBuilderTransactionState } from \"../enums/multi_builder_transaction_state.ts\";\nimport type { IParser } from \"../parser/interface_parser.ts\";\nimport type { SqlEasyState } from \"../state/sqleasy_state.ts\";\nimport type { IBuilder } from \"./interface_builder.ts\";\nimport type { IJoinOnBuilder } from \"./interface_join_on_builder.ts\";\nimport type { IMultiBuilder } from \"./interface_multi_builder.ts\";\n\nexport abstract class DefaultMultiBuilder<\n   T extends IBuilder<T, U, V>,\n   U extends IJoinOnBuilder<U>,\n   V extends IParser,\n> implements IMultiBuilder<T, U, V> {\n   private _config: IConfiguration;\n   private _states: SqlEasyState[] = [];\n   private _transactionState: MultiBuilderTransactionState =\n      MultiBuilderTransactionState.TransactionOn;\n\n   constructor(config: IConfiguration) {\n      this._config = config;\n   }\n\n   public abstract newBuilder(): T;\n   public abstract newParser(): V;\n\n   public addBuilder = (builderName: string): T => {\n      const newBuilder = this.newBuilder();\n      newBuilder.state().builderName = builderName;\n      this._states.push(newBuilder.state());\n\n      return newBuilder;\n   };\n\n   public parse = (): string => {\n      const parser = this.newParser();\n      const sql = parser.toSqlMulti(\n         this._states,\n         this._transactionState,\n      );\n\n      return sql;\n   };\n\n   public parseRaw = (): string => {\n      const parser = this.newParser();\n      const sql = parser.toSqlMultiRaw(\n         this._states,\n         this._transactionState,\n      );\n\n      return sql;\n   };\n\n   public removeBuilder = (builderName: string): void => {\n      this._states = this._states.filter((state) =>\n         state.builderName !== builderName\n      );\n   };\n\n   public reorderBuilders = (builderNames: string[]): void => {\n      const newStates: SqlEasyState[] = [];\n\n      builderNames.forEach((builderName) => {\n         const state = this._states.find((state) =>\n            state.builderName === builderName\n         );\n\n         if (state) {\n            newStates.push(state);\n         }\n      });\n\n      this._states = newStates;\n   };\n\n   public setTransactionState = (\n      transactionState: MultiBuilderTransactionState,\n   ): void => {\n      this._transactionState = transactionState;\n   };\n\n   public states = (): SqlEasyState[] => {\n      return this._states;\n   };\n\n   public transactionState = (): MultiBuilderTransactionState => {\n      return this._transactionState;\n   };\n}\n", "export class ConfigurationDelimiters {\n   begin: string = \"\";\n   end: string = \"\";\n}\n", "export class RuntimeConfiguration {\n   maxRowsReturned: number = 1000;\n   customConfiguration: any | undefined = undefined;\n}\n", "export enum DatabaseType {\n   Mssql,\n   Postgres,\n   Mysql,\n   Sqlite,\n   Unknown,\n}\n", "export enum Datatype {\n   Boolean,\n   DateTime,\n   Number,\n   String,\n   Unknown,\n}\n", "export enum ParserMode {\n   Raw,\n   Prepared,\n   None,\n}\n", "/** Encapsulating class for all is-checkers.  All methods\n * below this are static so there does not need to be any\n * references to constructors.  This class is meant to be\n * used as a utility class for checking the type of unknown\n * values.  This class is not meant to be instantiated.\n */\nexport default class IsHelper {\n  /** Determine whether any given unknown value is of type array.\n   * Will return false if the value is null or undefined.\n   */\n  public static isArray = <T = unknown>(value: unknown): value is T[] => {\n    if (this.isNullOrUndefined(value)) {\n      return false;\n    }\n\n    return Array.isArray(value);\n  };\n\n  /** Determine whether any given unknown value can be converted into a boolean\n   * This includes the number types 1 and 0 and\n   * the string types \"true\", \"false\", \"y\", \"n\", \"yes\", \"no\".\n   * Will return false if the value is null or undefined or is not a boolean.\n   */\n  public static isBoolean = (value: unknown): value is boolean => {\n    return (\n      !IsHelper.isNullOrUndefined(value) &&\n      ((typeof value === \"boolean\" && (value === true || value === false)) ||\n        (typeof value === \"string\" &&\n          (value === \"true\" || value === \"false\")) ||\n        (typeof value === \"string\" &&\n          (value as string).toLowerCase() === \"y\") ||\n        (typeof value === \"string\" &&\n          (value as string).toLowerCase() === \"n\") ||\n        (typeof value === \"string\" &&\n          (value as string).toLowerCase() === \"yes\") ||\n        (typeof value === \"string\" &&\n          (value as string).toLowerCase() === \"no\") ||\n        value === 1 ||\n        value === 0)\n    );\n  };\n\n  /** Will take any unknown value and attempt to return a true boolean.  Uses the\n   * isBoolean method to determine if the value can be converted to a boolean.  Will\n   * return a default value of false if the value cannot be converted.\n   */\n  public static getBooleanValue = (value: unknown): boolean => {\n    if (!this.isBoolean(value)) {\n      return false;\n    }\n\n    return (\n      (typeof value === \"boolean\" && value === true) ||\n      (typeof value === \"string\" && value === \"true\") ||\n      (typeof value === \"string\" && (value as string).toLowerCase() === \"y\") ||\n      (typeof value === \"string\" &&\n        (value as string).toLowerCase() === \"yes\") ||\n      (value as unknown) === 1\n    );\n  };\n\n  /** Determines whether any unknown value is a JavaScript Date object. */\n  public static isDate = (value: unknown): value is Date => {\n    return Object.prototype.toString.call(value) === \"[object Date]\";\n  };\n\n  /** Determines whether any unknown value is an empty array.  Uses the\n   * isArray method to determine if the value is an array and then checks\n   * the length of the array to determine if it is empty.\n   */\n  public static isEmptyArray = (value: unknown): boolean => {\n    return IsHelper.isArray(value) && value.length === 0;\n  };\n\n  /** Determines whether any unknown value is an empty object.  Uses the\n   * isObject method to determine if the value is an object and then checks\n   * the length of the object to determine if it is empty.  Will return\n   * false if the value cannot be converted into an object */\n  public static isEmptyObject = (value: unknown): boolean => {\n    return IsHelper.isObject(value) && Object.keys(value).length === 0;\n  };\n\n  /** Determines whether any unknown value is an empty string.  Will return\n   * false if the value cannot be converted into a string. */\n  public static isEmptyString = (value: unknown): boolean => {\n    return IsHelper.isString(value) && String(value).length === 0;\n  };\n\n  /** Determines whether any unknown value is an empty string or whitespace.  Will return\n   * false if the value cannot be converted into a string. */\n  public static isEmptyStringOrWhitespace = (value: unknown): boolean => {\n    return IsHelper.isEmptyString(value) || IsHelper.isWhiteSpaceString(value);\n  };\n\n  /** Determines whether any unknown value is a function. */\n  // deno-lint-ignore ban-types\n  public static isFunction = (value: unknown): value is Function => {\n    return typeof value === \"function\";\n  };\n\n  /** Determines whether any unknown value is in the format of an IP Address (v4). */\n  public static isIpv4 = (value: unknown): boolean => {\n    if (typeof value !== \"string\") {\n      return false;\n    }\n\n    const regex =\n      /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/g;\n\n    return regex.test(value);\n  };\n\n  /** Determines whether an unknown value is an array, and, if it is, returns\n   * if the array is empty.  Will return false if the value is not an array.\n   */\n  public static isNonEmptyArray = (value: unknown): value is unknown[] => {\n    return !IsHelper.isNullOrUndefined(value) && IsHelper.isArray(value) &&\n      !IsHelper.isEmptyArray(value);\n  };\n\n  /** Determines if an unknown value is equal to a JavaScript null */\n  public static isNull = (value: unknown): value is null => {\n    return value === null;\n  };\n\n  /** Determines if an unknown value is equal to a JavaScript null or a JavaScript undefined */\n  public static isNullOrUndefined = (\n    value: unknown,\n  ): value is null | undefined => {\n    return IsHelper.isNull(value) || IsHelper.isUndefined(value);\n  };\n\n  /** Determines if an unknown value is equal to a JavaScript null, a JavaScript\n   * undefined, an empty string, or a string that contains only whitespace. */\n  public static isNullOrUndefinedOrEmptyStringOrWhitespace = (\n    value: unknown,\n  ): value is null | undefined | \"\" => {\n    return IsHelper.isNullOrUndefined(value) ||\n      IsHelper.isEmptyStringOrWhitespace(value);\n  };\n\n  /** Determines if an unknown value can be converted into any type of number. */\n  public static isNumber = (value: unknown): value is number => {\n    if (IsHelper.isNullOrUndefined(value)) {\n      return false;\n    }\n\n    if (Number.isNaN(Number.parseFloat(`${value}`))) {\n      return false;\n    }\n\n    if (typeof value === \"number\") {\n      return true;\n    }\n\n    if (typeof value !== \"string\") {\n      return false;\n    }\n\n    if (IsHelper.isEmptyStringOrWhitespace(value)) {\n      return false;\n    }\n\n    const regex = /^[0-9]*$/g;\n\n    return regex.test(String(value));\n  };\n\n  /** Determines if an unknown value can be converted into any type of\n   * number and, if so, is the number greater than zero.\n   */\n  public static isPositiveNumber = (value: unknown): value is number => {\n    if (!IsHelper.isNumber(value)) {\n      return false;\n    }\n\n    if (value <= 0) {\n      return false;\n    }\n\n    return true;\n  };\n\n  /** Determines if an unknown value can be converted into\n   * a number and, if so, is the number a whole integer. */\n  public static isInteger = (value: unknown): value is number => {\n    if (!IsHelper.isNumber(value)) {\n      return false;\n    }\n\n    if (!Number.isInteger(Number.parseFloat(value.toString()))) {\n      return false;\n    }\n\n    return true;\n  };\n\n  /** Determines if an unknown value can be converted into\n   * a number and, if so, is the number a whole integer and its\n   * value greater than zero. */\n  public static isPositiveInteger = (value: unknown): value is number => {\n    if (!IsHelper.isInteger(value)) {\n      return false;\n    }\n\n    if (value <= 0) {\n      return false;\n    }\n\n    return true;\n  };\n\n  /** Determines if an unknown value has the JavaScript primitive type\n   * of object. */\n  public static isObject = (value: unknown): value is object => {\n    return (\n      !IsHelper.isNull(value) &&\n      (typeof value === \"object\" ||\n        IsHelper.isFunction(value) ||\n        Object.prototype.toString.call(value) === \"[object Object]\")\n    );\n  };\n\n  /** Determines if an unknown value has the JavaScript primitive type\n   * of object, and, if so, does it only contain \"model-based\" properties\n   * (anything that can be prototyped). */\n  public static isPlainObject = <T = unknown>(\n    value: unknown,\n  ): value is Record<string | number | symbol, T> => {\n    if (!this.isObject(value)) {\n      return false;\n    }\n\n    const prototype = Object.getPrototypeOf(value);\n    return prototype === null || prototype === Object.getPrototypeOf({});\n  };\n\n  /** Determines if an unknown value is a string. */\n  public static isString = (value: unknown): value is string => {\n    return typeof value === \"string\";\n  };\n\n  /** Determines if an unknown value is a JavaScript undefined or\n   * equal to the string value of \"undefined\". */\n  public static isUndefined = (value: unknown): value is undefined => {\n    return typeof value === \"undefined\" || value === undefined;\n  };\n\n  /** Determines if an unknown value is a string that contains only whitespace. */\n  public static isWhiteSpaceString = (value: unknown): value is string => {\n    return IsHelper.isString(value) && !IsHelper.isEmptyString(value) &&\n      !/\\S/.test(String(value));\n  };\n}\n", "/** A simple port of a string builder like those found in C#, Java, and\n * Go.  This is useful where string concatenation would be very cumbersome\n * to manage.  This is NOT meant to be used for extremely large strings, as it is\n * not optimized for that.  It is meant to be used for small collections of strings that\n * need to be built up over time.\n */\nexport default class StringBuilder {\n  /** The array of values to hold on to */\n  public values: string[] = [];\n\n  /** Creates an instance of the string builder with optional initial input */\n  public constructor(value = \"\") {\n    if (value !== null && value !== undefined && value.length > 0) {\n      this.values = new Array(value);\n    }\n  }\n\n  /** Appends a value to the string builder */\n  public append(value = \"\"): void {\n    if (value !== null && value !== undefined && value.length > 0) {\n      this.values.push(value);\n    }\n  }\n\n  /** Appends a value and a new line to the string builder */\n  public appendLine(value = \"\"): void {\n    if (value !== null && value !== undefined && value.length > 0) {\n      this.values.push(value + \"\\r\\n\");\n    }\n  }\n\n  /** Clears the string builder */\n  public clear(): void {\n    this.values = new Array<string>();\n  }\n\n  /** Returns the string representation of the string builder */\n  public toString(): string {\n    return this.values.join(\"\");\n  }\n}\n", "import IsHelper from \"@withonevision/is-helper\";\nimport StringBuilder from \"@withonevision/string-builder\";\nimport type { IConfiguration } from \"../configuration/interface_configuration.ts\";\nimport { ParserMode } from \"../enums/parser_mode.ts\";\n\nexport class SqlHelper {\n   private _sb = new StringBuilder();\n   private _values: any[] = [];\n   private _config: IConfiguration;\n   private _parserMode: ParserMode;\n\n   constructor(config: IConfiguration, parserMode: ParserMode) {\n      this._config = config;\n      this._parserMode = parserMode;\n   }\n\n   public addDynamicValue = (value: any): string => {\n      if (this._parserMode === ParserMode.Prepared) {\n         this._values.push(value);\n         return this._config.preparedStatementPlaceholder();\n      }\n\n      return this.getValueStringFromDataType(value);\n   };\n\n   public addSqlSnippet = (sql: string): void => {\n      this._sb.append(sql);\n   };\n\n   public addSqlSnippetWithValues = (sqlString: string, value: any): void => {\n      this._values.push(value);\n      this.addSqlSnippet(sqlString);\n   };\n\n   public clear = (): void => {\n      this._sb = new StringBuilder();\n      this._values = [];\n   };\n\n   public getSql = (): string => {\n      return this._sb.toString();\n   };\n\n   public getSqlDebug = (): string => {\n      let sqlString = this._sb.toString();\n\n      this._values.forEach((value) => {\n         const valuePosition = sqlString.indexOf(\n            this._config.preparedStatementPlaceholder(),\n         );\n\n         if (valuePosition === -1) {\n            return;\n         }\n\n         sqlString = sqlString.substring(0, valuePosition) + value +\n            sqlString.substring(valuePosition + 1);\n      });\n\n      return sqlString;\n   };\n\n   public getValues = (): any[] => {\n      if (this._values.length === 0) {\n         return [];\n      }\n\n      return this._values.filter((value) => !IsHelper.isNullOrUndefined(value));\n   };\n\n   public getValueStringFromDataType = (value: any): string => {\n      if (value === null || value === undefined) {\n         return \"\";\n      }\n\n      switch (typeof value) {\n         case \"string\":\n            return value;\n         case \"number\":\n            return value.toString();\n         case \"boolean\":\n            return value ? \"true\" : \"false\";\n         case \"object\":\n            if (value instanceof Date) {\n               return value.toISOString();\n            }\n            return JSON.stringify(value);\n         default:\n            return value.toString();\n      }\n   };\n}\n", "import type { ParserArea } from \"../enums/parser_area.ts\";\n\nexport class ParserError extends Error {\n   public constructor(parserArea: ParserArea, message: string) {\n      const finalMessage = `${parserArea}: ${message}`;\n      super(finalMessage);\n      this.name = \"SqlEasyParserError\";\n   }\n}\n", "import { DefaultJoinOnBuilder } from \"../../builder/default_join_on_builder.ts\";\nimport type { MssqlConfiguration } from \"./mssql_configuration.ts\";\n\nexport class MssqlJoinOnBuilder\n   extends DefaultJoinOnBuilder<MssqlJoinOnBuilder> {\n   private _mssqlConfiguration: MssqlConfiguration;\n\n   constructor(config: MssqlConfiguration) {\n      super(config);\n      this._mssqlConfiguration = config;\n   }\n\n   public override newJoinOnBuilder = (): MssqlJoinOnBuilder => {\n      return new MssqlJoinOnBuilder(this._mssqlConfiguration);\n   };\n}\n", "import type { IConfiguration } from \"../configuration/interface_configuration.ts\";\nimport { BuilderType } from \"../enums/builder_type.ts\";\nimport { DatabaseType } from \"../enums/database_type.ts\";\nimport { ParserArea } from \"../enums/parser_area.ts\";\nimport type { ParserMode } from \"../enums/parser_mode.ts\";\nimport { SqlHelper } from \"../helpers/sql_helper.ts\";\nimport { ParserError } from \"../helpers/parser_error.ts\";\nimport type { SqlEasyState } from \"../state/sqleasy_state.ts\";\nimport { defaultToSql } from \"./default_to_sql.ts\";\n\nexport const defaultFrom = (\n   state: SqlEasyState,\n   config: IConfiguration,\n   mode: ParserMode,\n): SqlHelper => {\n   const sqlHelper = new SqlHelper(config, mode);\n\n   if (state.fromStates.length === 0) {\n      throw new ParserError(ParserArea.From, \"No tables to select from\");\n   }\n\n   sqlHelper.addSqlSnippet(\"FROM \");\n\n   state.fromStates.forEach((fromState, i) => {\n      if (fromState.builderType === BuilderType.FromRaw) {\n         sqlHelper.addSqlSnippet(fromState.raw ?? \"\");\n         if (i < state.fromStates.length - 1) {\n            sqlHelper.addSqlSnippet(\", \");\n         }\n         return;\n      }\n\n      if (fromState.builderType === BuilderType.FromTable) {\n         if (\n            fromState.owner !== \"\" &&\n            config.databaseType() === DatabaseType.Mysql\n         ) {\n            throw new ParserError(\n               ParserArea.From,\n               \"MySQL does not support table owners\",\n            );\n         }\n\n         if (fromState.owner !== \"\") {\n            sqlHelper.addSqlSnippet(\n               config.identifierDelimiters().begin + fromState.owner +\n                  config.identifierDelimiters().end,\n            );\n            sqlHelper.addSqlSnippet(\".\");\n         }\n\n         sqlHelper.addSqlSnippet(\n            config.identifierDelimiters().begin + fromState.tableName +\n               config.identifierDelimiters().end,\n         );\n\n         if (fromState.alias !== \"\") {\n            sqlHelper.addSqlSnippet(\" AS \");\n            sqlHelper.addSqlSnippet(\n               config.identifierDelimiters().begin + fromState.alias +\n                  config.identifierDelimiters().end,\n            );\n         }\n\n         if (i < state.fromStates.length - 1) {\n            sqlHelper.addSqlSnippet(\", \");\n         }\n\n         return;\n      }\n\n      if (fromState.builderType === BuilderType.FromBuilder) {\n         const subHelper = defaultToSql(\n            fromState.sqlEasyState,\n            config,\n            mode,\n         );\n\n         sqlHelper.addSqlSnippet(\"(\" + subHelper.getSql() + \")\");\n\n         if (fromState.alias !== \"\") {\n            sqlHelper.addSqlSnippet(\" AS \");\n            sqlHelper.addSqlSnippet(\n               config.identifierDelimiters().begin + fromState.alias +\n                  config.identifierDelimiters().end,\n            );\n         }\n\n         if (i < state.fromStates.length - 1) {\n            sqlHelper.addSqlSnippet(\", \");\n         }\n      }\n   });\n\n   return sqlHelper;\n};\n", "import type { IConfiguration } from \"../configuration/interface_configuration.ts\";\nimport { BuilderType } from \"../enums/builder_type.ts\";\nimport { JoinOnOperator } from \"../enums/join_on_operator.ts\";\nimport { JoinOperator } from \"../enums/join_operator.ts\";\nimport { JoinType } from \"../enums/join_type.ts\";\nimport { ParserArea } from \"../enums/parser_area.ts\";\nimport type { ParserMode } from \"../enums/parser_mode.ts\";\nimport { SqlHelper } from \"../helpers/sql_helper.ts\";\nimport { ParserError } from \"../helpers/parser_error.ts\";\nimport type { JoinOnState } from \"../state/join_on_state.ts\";\nimport type { SqlEasyState } from \"../state/sqleasy_state.ts\";\nimport { defaultToSql } from \"./default_to_sql.ts\";\n\nexport const defaultJoin = (\n   state: SqlEasyState,\n   config: IConfiguration,\n   mode: ParserMode,\n): SqlHelper => {\n   let sqlHelper = new SqlHelper(config, mode);\n\n   if (state.joinStates.length === 0) {\n      return sqlHelper;\n   }\n\n   for (let i = 0; i < state.joinStates.length; i++) {\n      const joinState = state.joinStates[i];\n      if (joinState.builderType === BuilderType.JoinRaw) {\n         sqlHelper.addSqlSnippet(joinState.raw ?? \"\");\n         if (i < state.joinStates.length - 1) {\n            sqlHelper.addSqlSnippet(\" \");\n         }\n         continue;\n      }\n\n      switch (joinState.joinType) {\n         case JoinType.Inner:\n            sqlHelper.addSqlSnippet(\"INNER JOIN \");\n            break;\n         case JoinType.Left:\n            sqlHelper.addSqlSnippet(\"LEFT JOIN \");\n            break;\n         case JoinType.LeftOuter:\n            sqlHelper.addSqlSnippet(\"LEFT OUTER JOIN \");\n            break;\n         case JoinType.Right:\n            sqlHelper.addSqlSnippet(\"RIGHT JOIN \");\n            break;\n         case JoinType.RightOuter:\n            sqlHelper.addSqlSnippet(\"RIGHT OUTER JOIN \");\n            break;\n         case JoinType.FullOuter:\n            sqlHelper.addSqlSnippet(\"FULL OUTER JOIN \");\n            break;\n         case JoinType.Cross:\n            sqlHelper.addSqlSnippet(\"CROSS JOIN \");\n            break;\n      }\n\n      if (joinState.builderType === BuilderType.JoinTable) {\n         if (joinState.owner !== \"\") {\n            sqlHelper.addSqlSnippet(\n               config.identifierDelimiters().begin + joinState.owner +\n                  config.identifierDelimiters().end,\n            );\n            sqlHelper.addSqlSnippet(\".\");\n         }\n\n         sqlHelper.addSqlSnippet(\n            config.identifierDelimiters().begin + joinState.tableName +\n               config.identifierDelimiters().end,\n         );\n\n         if (joinState.alias !== \"\") {\n            sqlHelper.addSqlSnippet(\" AS \");\n            sqlHelper.addSqlSnippet(\n               config.identifierDelimiters().begin + joinState.alias +\n                  config.identifierDelimiters().end,\n            );\n         }\n\n         sqlHelper = defaultJoinOns(sqlHelper, config, joinState.joinOnStates);\n\n         if (i < state.joinStates.length - 1) {\n            sqlHelper.addSqlSnippet(\" \");\n         }\n\n         continue;\n      }\n\n      if (joinState.builderType === BuilderType.JoinBuilder) {\n         const subHelper = defaultToSql(\n            joinState.sqlEasyState,\n            config,\n            mode,\n         );\n\n         sqlHelper.addSqlSnippet(\"(\" + subHelper.getSql() + \")\");\n\n         if (joinState.alias !== \"\") {\n            sqlHelper.addSqlSnippet(\" AS \");\n            sqlHelper.addSqlSnippet(\n               config.identifierDelimiters().begin + joinState.alias +\n                  config.identifierDelimiters().end,\n            );\n         }\n\n         sqlHelper = defaultJoinOns(sqlHelper, config, joinState.joinOnStates);\n\n         if (i < state.joinStates.length - 1) {\n            sqlHelper.addSqlSnippet(\" \");\n         }\n      }\n   }\n\n   return sqlHelper;\n};\n\nconst defaultJoinOns = (\n   sqlHelper: SqlHelper,\n   config: IConfiguration,\n   joinOnStates: JoinOnState[],\n): SqlHelper => {\n   if (joinOnStates.length === 0) {\n      return sqlHelper;\n   }\n\n   sqlHelper.addSqlSnippet(\" ON \");\n\n   for (let i = 0; i < joinOnStates.length; i++) {\n      if (\n         i === 0 &&\n         (joinOnStates[i].joinOnOperator === JoinOnOperator.And ||\n            joinOnStates[i].joinOnOperator === JoinOnOperator.Or)\n      ) {\n         throw new ParserError(\n            ParserArea.Join,\n            \"First JOIN ON operator cannot be AND or OR\",\n         );\n      }\n\n      if (\n         i === joinOnStates.length - 1 &&\n         (joinOnStates[i].joinOnOperator === JoinOnOperator.And ||\n            joinOnStates[i].joinOnOperator === JoinOnOperator.Or)\n      ) {\n         throw new ParserError(\n            ParserArea.Join,\n            \"AND or OR cannot be used as the last JOIN ON operator\",\n         );\n      }\n\n      if (\n         (joinOnStates[i].joinOnOperator === JoinOnOperator.And ||\n            joinOnStates[i].joinOnOperator === JoinOnOperator.Or) && (\n               joinOnStates[i - 1].joinOnOperator === JoinOnOperator.And ||\n               joinOnStates[i - 1].joinOnOperator === JoinOnOperator.Or\n            )\n      ) {\n         throw new ParserError(\n            ParserArea.Join,\n            \"AND or OR cannot be used consecutively\",\n         );\n      }\n\n      if (\n         (joinOnStates[i].joinOnOperator === JoinOnOperator.And ||\n            joinOnStates[i].joinOnOperator === JoinOnOperator.Or) && (\n               joinOnStates[i - 1].joinOnOperator === JoinOnOperator.GroupBegin\n            )\n      ) {\n         throw new ParserError(\n            ParserArea.Join,\n            \"AND or OR cannot be used directly after a group begin\",\n         );\n      }\n\n      if (\n         joinOnStates[i].joinOnOperator === JoinOnOperator.GroupBegin &&\n         i === joinOnStates.length - 1\n      ) {\n         throw new ParserError(\n            ParserArea.Join,\n            \"Group begin cannot be the last JOIN ON operator\",\n         );\n      }\n\n      if (\n         joinOnStates[i].joinOnOperator === JoinOnOperator.GroupEnd && i === 0\n      ) {\n         throw new ParserError(\n            ParserArea.Join,\n            \"Group end cannot be the first JOIN ON operator\",\n         );\n      }\n\n      if (joinOnStates[i].joinOnOperator === JoinOnOperator.And) {\n         sqlHelper.addSqlSnippet(\"AND\");\n\n         if (i < joinOnStates.length - 1) {\n            sqlHelper.addSqlSnippet(\" \");\n         }\n         continue;\n      }\n\n      if (joinOnStates[i].joinOnOperator === JoinOnOperator.Or) {\n         sqlHelper.addSqlSnippet(\"OR\");\n\n         if (i < joinOnStates.length - 1) {\n            sqlHelper.addSqlSnippet(\" \");\n         }\n         continue;\n      }\n\n      if (joinOnStates[i].joinOnOperator === JoinOnOperator.GroupBegin) {\n         sqlHelper.addSqlSnippet(\"(\");\n         continue;\n      }\n\n      if (joinOnStates[i].joinOnOperator === JoinOnOperator.GroupEnd) {\n         sqlHelper.addSqlSnippet(\")\");\n\n         if (i < joinOnStates.length - 1) {\n            sqlHelper.addSqlSnippet(\" \");\n         }\n         continue;\n      }\n\n      if (joinOnStates[i].joinOnOperator === JoinOnOperator.Raw) {\n         sqlHelper.addSqlSnippet(joinOnStates[i].raw ?? \"\");\n\n         if (i < joinOnStates.length - 1) {\n            sqlHelper.addSqlSnippet(\" \");\n         }\n         continue;\n      }\n\n      if (joinOnStates[i].joinOnOperator === JoinOnOperator.On) {\n         sqlHelper.addSqlSnippet(\n            config\n               .identifierDelimiters()\n               .begin + joinOnStates[i].aliasLeft + config\n               .identifierDelimiters()\n               .end,\n         );\n         sqlHelper.addSqlSnippet(\".\");\n         sqlHelper.addSqlSnippet(\n            config\n               .identifierDelimiters()\n               .begin + joinOnStates[i].columnLeft + config\n               .identifierDelimiters()\n               .end,\n         );\n\n         sqlHelper.addSqlSnippet(\" \");\n\n         switch (joinOnStates[i].joinOperator) {\n            case JoinOperator.Equals:\n               sqlHelper.addSqlSnippet(\"=\");\n               break;\n            case JoinOperator.NotEquals:\n               sqlHelper.addSqlSnippet(\"<>\");\n               break;\n            case JoinOperator.GreaterThan:\n               sqlHelper.addSqlSnippet(\">\");\n               break;\n            case JoinOperator.GreaterThanOrEquals:\n               sqlHelper.addSqlSnippet(\">=\");\n               break;\n            case JoinOperator.LessThan:\n               sqlHelper.addSqlSnippet(\"<\");\n               break;\n            case JoinOperator.LessThanOrEquals:\n               sqlHelper.addSqlSnippet(\"<=\");\n               break;\n         }\n\n         sqlHelper.addSqlSnippet(\" \");\n\n         sqlHelper.addSqlSnippet(\n            config\n               .identifierDelimiters()\n               .begin + joinOnStates[i].aliasRight + config\n               .identifierDelimiters()\n               .end,\n         );\n         sqlHelper.addSqlSnippet(\".\");\n         sqlHelper.addSqlSnippet(\n            config\n               .identifierDelimiters()\n               .begin + joinOnStates[i].columnRight + config\n               .identifierDelimiters()\n               .end,\n         );\n\n         if (i < joinOnStates.length - 1) {\n            sqlHelper.addSqlSnippet(\" \");\n         }\n         continue;\n      }\n\n      if (joinOnStates[i].joinOnOperator === JoinOnOperator.Value) {\n         sqlHelper.addSqlSnippet(\n            config\n               .identifierDelimiters()\n               .begin + joinOnStates[i].aliasLeft + config\n               .identifierDelimiters()\n               .end,\n         );\n         sqlHelper.addSqlSnippet(\".\");\n         sqlHelper.addSqlSnippet(\n            config\n               .identifierDelimiters()\n               .begin + joinOnStates[i].columnLeft + config\n               .identifierDelimiters()\n               .end,\n         );\n\n         sqlHelper.addSqlSnippet(\" \");\n\n         switch (joinOnStates[i].joinOperator) {\n            case JoinOperator.Equals:\n               sqlHelper.addSqlSnippet(\"=\");\n               break;\n            case JoinOperator.NotEquals:\n               sqlHelper.addSqlSnippet(\"<>\");\n               break;\n            case JoinOperator.GreaterThan:\n               sqlHelper.addSqlSnippet(\">\");\n               break;\n            case JoinOperator.GreaterThanOrEquals:\n               sqlHelper.addSqlSnippet(\">=\");\n               break;\n            case JoinOperator.LessThan:\n               sqlHelper.addSqlSnippet(\"<\");\n               break;\n            case JoinOperator.LessThanOrEquals:\n               sqlHelper.addSqlSnippet(\"<=\");\n               break;\n         }\n\n         sqlHelper.addSqlSnippet(\" \");\n\n         sqlHelper.addSqlSnippet(\n            sqlHelper.addDynamicValue(\n               joinOnStates[i].valueRight,\n            ),\n         );\n\n         if (i < joinOnStates.length - 1) {\n            sqlHelper.addSqlSnippet(\" \");\n         }\n         continue;\n      }\n   }\n\n   return sqlHelper;\n};\n", "import IsHelper from \"@withonevision/is-helper\";\nimport type { IConfiguration } from \"../configuration/interface_configuration.ts\";\nimport { DatabaseType } from \"../enums/database_type.ts\";\nimport type { ParserMode } from \"../enums/parser_mode.ts\";\nimport { SqlHelper } from \"../helpers/sql_helper.ts\";\nimport type { SqlEasyState } from \"../state/sqleasy_state.ts\";\nimport { ParserError } from \"../helpers/parser_error.ts\";\nimport { ParserArea } from \"../enums/parser_area.ts\";\n\nexport const defaultLimitOffset = (\n   state: SqlEasyState,\n   config: IConfiguration,\n   mode: ParserMode,\n): SqlHelper => {\n   const sqlHelper = new SqlHelper(config, mode);\n\n   if (state.limit == 0 && state.offset == 0) {\n      return sqlHelper;\n   }\n\n   if (\n      config.databaseType() == DatabaseType.Mysql ||\n      config.databaseType() == DatabaseType.Postgres\n   ) {\n      if (state.limit > 0) {\n         sqlHelper.addSqlSnippet(\"LIMIT \");\n         sqlHelper.addSqlSnippet(state.limit.toString());\n      }\n\n      if (\n         state.limit == 0 && !state.isInnerStatement &&\n         (IsHelper.isNullOrUndefined(state.whereStates) ||\n            state.whereStates.length == 0)\n      ) {\n         sqlHelper.addSqlSnippet(\"LIMIT \");\n         sqlHelper.addSqlSnippet(\n            config.runtimeConfiguration().maxRowsReturned.toString(),\n         );\n      }\n\n      if (state.offset > 0) {\n         if (state.limit > 0) {\n            sqlHelper.addSqlSnippet(\" \");\n         }\n\n         sqlHelper.addSqlSnippet(\" OFFSET \");\n         sqlHelper.addSqlSnippet(state.offset.toString());\n      }\n   }\n\n   if (config.databaseType() == DatabaseType.Mssql) {\n      if (\n         !IsHelper.isNullOrUndefined(state.customState) &&\n         !IsHelper.isNullOrUndefined(state.customState[\"top\"]) &&\n         (state.limit > 0 || state.offset > 0)\n      ) {\n         throw new ParserError(\n            ParserArea.LimitOffset,\n            \"MSSQL should not use both TOP and LIMIT/OFFSET in the same query\",\n         );\n      }\n\n      if (state.limit > 0 || state.offset > 0) {\n         sqlHelper.addSqlSnippet(\"OFFSET \");\n         sqlHelper.addSqlSnippet(state.offset.toString());\n         sqlHelper.addSqlSnippet(\" ROWS\");\n      }\n\n      if (state.limit > 0) {\n         sqlHelper.addSqlSnippet(\" \");\n\n         sqlHelper.addSqlSnippet(\"FETCH NEXT \");\n         sqlHelper.addSqlSnippet(state.limit.toString());\n         sqlHelper.addSqlSnippet(\" ROWS ONLY\");\n      }\n   }\n\n   if (\n      state.offset > 0 &&\n      (IsHelper.isNullOrUndefined(state.orderByStates) ||\n         state.orderByStates.length == 0)\n   ) {\n      throw new ParserError(\n         ParserArea.LimitOffset,\n         \"ORDER BY is required when using OFFSET\",\n      );\n   }\n\n   return sqlHelper;\n};\n", "import type { IConfiguration } from \"../configuration/interface_configuration.ts\";\nimport { BuilderType } from \"../enums/builder_type.ts\";\nimport { OrderByDirection } from \"../enums/order_by_direction.ts\";\nimport type { ParserMode } from \"../enums/parser_mode.ts\";\nimport { SqlHelper } from \"../helpers/sql_helper.ts\";\nimport type { SqlEasyState } from \"../state/sqleasy_state.ts\";\n\nexport const defaultOrderBy = (\n   state: SqlEasyState,\n   config: IConfiguration,\n   mode: ParserMode,\n): SqlHelper => {\n   const sqlHelper = new SqlHelper(config, mode);\n\n   if (state.orderByStates.length === 0) {\n      return sqlHelper;\n   }\n\n   sqlHelper.addSqlSnippet(\"ORDER BY \");\n\n   state.orderByStates.forEach((orderByState, i) => {\n      if (orderByState.builderType === BuilderType.OrderByRaw) {\n         sqlHelper.addSqlSnippet(orderByState.raw ?? \"\");\n\n         if (i < state.orderByStates.length - 1) {\n            sqlHelper.addSqlSnippet(\", \");\n         }\n\n         return;\n      }\n\n      if (orderByState.builderType === BuilderType.OrderByColumn) {\n         sqlHelper.addSqlSnippet(\n            config.identifierDelimiters().begin +\n               orderByState.tableNameOrAlias +\n               config.identifierDelimiters().end,\n         );\n         sqlHelper.addSqlSnippet(\".\");\n         sqlHelper.addSqlSnippet(\n            config.identifierDelimiters().begin + orderByState.columnName +\n               config.identifierDelimiters().end,\n         );\n\n         if (orderByState.direction === OrderByDirection.Ascending) {\n            sqlHelper.addSqlSnippet(\" ASC\");\n         } else {\n            sqlHelper.addSqlSnippet(\" DESC\");\n         }\n\n         if (i < state.orderByStates.length - 1) {\n            sqlHelper.addSqlSnippet(\", \");\n         }\n\n         return;\n      }\n   });\n\n   return sqlHelper;\n};\n", "import IsHelper from \"@withonevision/is-helper\";\nimport type { IConfiguration } from \"../configuration/interface_configuration.ts\";\nimport { DatabaseType } from \"../enums/database_type.ts\";\nimport type { ParserMode } from \"../enums/parser_mode.ts\";\nimport { SqlHelper } from \"../helpers/sql_helper.ts\";\nimport type { SqlEasyState } from \"../state/sqleasy_state.ts\";\nimport { BuilderType } from \"../enums/builder_type.ts\";\nimport { defaultToSql } from \"./default_to_sql.ts\";\nimport { ParserError } from \"../helpers/parser_error.ts\";\nimport { ParserArea } from \"../enums/parser_area.ts\";\n\nexport const defaultSelect = (\n   state: SqlEasyState,\n   config: IConfiguration,\n   mode: ParserMode,\n): SqlHelper => {\n   const sqlHelper = new SqlHelper(config, mode);\n\n   if (state.selectStates.length === 0) {\n      throw new ParserError(\n         ParserArea.Select,\n         \"Select statement must have at least one select state\",\n      );\n   }\n\n   sqlHelper.addSqlSnippet(\"SELECT \");\n\n   if (state.distinct) {\n      sqlHelper.addSqlSnippet(\"DISTINCT \");\n   }\n\n   if (config.databaseType() === DatabaseType.Mssql) {\n      if (\n         !IsHelper.isNullOrUndefined(state.customState) &&\n         !IsHelper.isNullOrUndefined(state.customState[\"top\"]) &&\n         state.customState[\"top\"] > 0\n      ) {\n         sqlHelper.addSqlSnippet(\"TOP \");\n         sqlHelper.addSqlSnippet(`(${state.customState[\"top\"]})`);\n         sqlHelper.addSqlSnippet(\" \");\n      }\n\n      if (\n         !IsHelper.isNullOrUndefined(state.customState) &&\n         IsHelper.isNullOrUndefined(state.customState[\"top\"]) &&\n         !state.isInnerStatement &&\n         state.limit === 0 &&\n         (!state.whereStates || state.whereStates.length === 0)\n      ) {\n         sqlHelper.addSqlSnippet(\"TOP \");\n         sqlHelper.addSqlSnippet(\n            `(${config.runtimeConfiguration().maxRowsReturned})`,\n         );\n         sqlHelper.addSqlSnippet(\" \");\n      }\n   }\n\n   for (let i = 0; i < state.selectStates.length; i++) {\n      const selectState = state.selectStates[i];\n\n      if (selectState.builderType === BuilderType.SelectAll) {\n         sqlHelper.addSqlSnippet(\"*\");\n\n         if (i < state.selectStates.length - 1) {\n            sqlHelper.addSqlSnippet(\", \");\n         }\n      }\n\n      if (selectState.builderType === BuilderType.SelectRaw) {\n         sqlHelper.addSqlSnippet(selectState.raw ?? \"\");\n         if (i < state.selectStates.length - 1) {\n            sqlHelper.addSqlSnippet(\", \");\n         }\n         continue;\n      }\n\n      if (selectState.builderType === BuilderType.SelectColumn) {\n         sqlHelper.addSqlSnippet(\n            `${config.identifierDelimiters().begin}${selectState.tableNameOrAlias}${config.identifierDelimiters().end}`,\n         );\n         sqlHelper.addSqlSnippet(\".\");\n         sqlHelper.addSqlSnippet(\n            `${config.identifierDelimiters().begin}${selectState.columnName}${config.identifierDelimiters().end}`,\n         );\n\n         if (selectState.alias !== \"\") {\n            sqlHelper.addSqlSnippet(\" AS \");\n            sqlHelper.addSqlSnippet(\n               `${config.identifierDelimiters().begin}${selectState.alias}${config.identifierDelimiters().end}`,\n            );\n         }\n\n         if (i < state.selectStates.length - 1) {\n            sqlHelper.addSqlSnippet(\", \");\n         }\n\n         continue;\n      }\n\n      if (selectState.builderType === BuilderType.SelectBuilder) {\n         const subHelper = defaultToSql(\n            selectState.sqlEasyState,\n            config,\n            mode,\n         );\n\n         sqlHelper.addSqlSnippet(`(${subHelper.getSql()})`);\n\n         if (selectState.alias !== \"\") {\n            sqlHelper.addSqlSnippet(\" AS \");\n            sqlHelper.addSqlSnippet(\n               `${config.identifierDelimiters().begin}${selectState.alias}${config.identifierDelimiters().end}`,\n            );\n         }\n\n         if (i < state.selectStates.length - 1) {\n            sqlHelper.addSqlSnippet(\", \");\n         }\n\n         continue;\n      }\n   }\n\n   return sqlHelper;\n};\n", "import type { IConfiguration } from \"../configuration/interface_configuration.ts\";\nimport { BuilderType } from \"../enums/builder_type.ts\";\nimport { ParserArea } from \"../enums/parser_area.ts\";\nimport type { ParserMode } from \"../enums/parser_mode.ts\";\nimport { WhereOperator } from \"../enums/where_operator.ts\";\nimport { SqlHelper } from \"../helpers/sql_helper.ts\";\nimport { ParserError } from \"../helpers/parser_error.ts\";\nimport type { SqlEasyState } from \"../state/sqleasy_state.ts\";\nimport { defaultToSql } from \"./default_to_sql.ts\";\n\nexport const defaultWhere = (\n   state: SqlEasyState,\n   config: IConfiguration,\n   mode: ParserMode,\n): SqlHelper => {\n   const sqlHelper = new SqlHelper(config, mode);\n\n   if (state.whereStates.length === 0) {\n      return sqlHelper;\n   }\n\n   sqlHelper.addSqlSnippet(\"WHERE \");\n\n   for (let i = 0; i < state.whereStates.length; i++) {\n      if (\n         i === 0 &&\n         (state.whereStates[i].builderType === BuilderType.And ||\n            state.whereStates[i].builderType === BuilderType.Or)\n      ) {\n         throw new ParserError(\n            ParserArea.Where,\n            \"First WHERE operator cannot be AND or OR\",\n         );\n      }\n\n      if (\n         i === state.whereStates.length - 1 &&\n         (state.whereStates[i].builderType === BuilderType.And ||\n            state.whereStates[i].builderType === BuilderType.Or)\n      ) {\n         throw new ParserError(\n            ParserArea.Where,\n            \"AND or OR cannot be used as the last WHERE operator\",\n         );\n      }\n\n      if (\n         (state.whereStates[i].builderType === BuilderType.And ||\n            state.whereStates[i].builderType === BuilderType.Or) && (\n               state.whereStates[i - 1].builderType === BuilderType.And ||\n               state.whereStates[i - 1].builderType === BuilderType.Or\n            )\n      ) {\n         throw new ParserError(\n            ParserArea.Where,\n            \"AND or OR cannot be used consecutively\",\n         );\n      }\n\n      if (\n         (state.whereStates[i].builderType === BuilderType.And ||\n            state.whereStates[i].builderType === BuilderType.Or) && (\n               state.whereStates[i - 1].builderType ===\n                  BuilderType.WhereGroupBegin\n            )\n      ) {\n         throw new ParserError(\n            ParserArea.Where,\n            \"AND or OR cannot be used directly after a group begin\",\n         );\n      }\n\n      if (\n         state.whereStates[i].builderType === BuilderType.WhereGroupBegin &&\n         i === state.whereStates.length - 1\n      ) {\n         throw new ParserError(\n            ParserArea.Where,\n            \"Group begin cannot be the last WHERE operator\",\n         );\n      }\n\n      if (\n         state.whereStates[i].builderType === BuilderType.WhereGroupEnd &&\n         i === 0\n      ) {\n         throw new ParserError(\n            ParserArea.Where,\n            \"Group end cannot be the first WHERE operator\",\n         );\n      }\n\n      if (state.whereStates[i].builderType === BuilderType.And) {\n         sqlHelper.addSqlSnippet(\"AND\");\n\n         if (i < state.whereStates.length - 1) {\n            sqlHelper.addSqlSnippet(\" \");\n         }\n         continue;\n      }\n\n      if (state.whereStates[i].builderType === BuilderType.Or) {\n         sqlHelper.addSqlSnippet(\"OR\");\n\n         if (\n            i < state.whereStates.length - 1 &&\n            state.whereStates[i + 1].builderType !== BuilderType.WhereGroupEnd\n         ) {\n            sqlHelper.addSqlSnippet(\" \");\n         }\n         continue;\n      }\n\n      if (state.whereStates[i].builderType === BuilderType.WhereGroupBegin) {\n         sqlHelper.addSqlSnippet(\"(\");\n         continue;\n      }\n\n      if (state.whereStates[i].builderType === BuilderType.WhereGroupEnd) {\n         sqlHelper.addSqlSnippet(\")\");\n\n         if (\n            i < state.whereStates.length - 1 &&\n            state.whereStates[i + 1].builderType !== BuilderType.WhereGroupEnd\n         ) {\n            sqlHelper.addSqlSnippet(\" \");\n         }\n         continue;\n      }\n\n      if (state.whereStates[i].builderType === BuilderType.WhereRaw) {\n         sqlHelper.addSqlSnippet(state.whereStates[i].raw ?? \"\");\n\n         if (\n            i < state.whereStates.length - 1 &&\n            state.whereStates[i + 1].builderType !== BuilderType.WhereGroupEnd\n         ) {\n            sqlHelper.addSqlSnippet(\" \");\n         }\n         continue;\n      }\n\n      if (state.whereStates[i].builderType === BuilderType.Where) {\n         sqlHelper.addSqlSnippet(\n            config.identifierDelimiters().begin +\n               state.whereStates[i].tableNameOrAlias +\n               config.identifierDelimiters().end,\n         );\n         sqlHelper.addSqlSnippet(\".\");\n         sqlHelper.addSqlSnippet(\n            config.identifierDelimiters().begin +\n               state.whereStates[i].columnName +\n               config.identifierDelimiters().end,\n         );\n         sqlHelper.addSqlSnippet(\" \");\n\n         switch (state.whereStates[i].whereOperator) {\n            case WhereOperator.Equals:\n               sqlHelper.addSqlSnippet(\"=\");\n               break;\n            case WhereOperator.NotEquals:\n               sqlHelper.addSqlSnippet(\"<>\");\n               break;\n            case WhereOperator.GreaterThan:\n               sqlHelper.addSqlSnippet(\">\");\n               break;\n            case WhereOperator.GreaterThanOrEquals:\n               sqlHelper.addSqlSnippet(\">=\");\n               break;\n            case WhereOperator.LessThan:\n               sqlHelper.addSqlSnippet(\"<\");\n               break;\n            case WhereOperator.LessThanOrEquals:\n               sqlHelper.addSqlSnippet(\"<=\");\n               break;\n         }\n\n         sqlHelper.addSqlSnippet(\" \");\n         sqlHelper.addSqlSnippet(\n            sqlHelper.addDynamicValue(state.whereStates[i].values[0]),\n         );\n\n         if (\n            i < state.whereStates.length - 1 &&\n            state.whereStates[i + 1].builderType !== BuilderType.WhereGroupEnd\n         ) {\n            sqlHelper.addSqlSnippet(\" \");\n         }\n         continue;\n      }\n\n      if (state.whereStates[i].builderType == BuilderType.WhereBetween) {\n         sqlHelper.addSqlSnippet(\n            config.identifierDelimiters().begin +\n               state.whereStates[i].tableNameOrAlias +\n               config.identifierDelimiters().end,\n         );\n         sqlHelper.addSqlSnippet(\".\");\n         sqlHelper.addSqlSnippet(\n            config.identifierDelimiters().begin +\n               state.whereStates[i].columnName +\n               config.identifierDelimiters().end,\n         );\n         sqlHelper.addSqlSnippet(\" \");\n         sqlHelper.addSqlSnippet(\"BETWEEN \");\n         sqlHelper.addSqlSnippet(sqlHelper.addDynamicValue(\n            state.whereStates[i].values[0],\n         ));\n         sqlHelper.addSqlSnippet(\" AND \");\n         sqlHelper.addSqlSnippet(sqlHelper.addDynamicValue(\n            state.whereStates[i].values[1],\n         ));\n\n         if (\n            i < state.whereStates.length - 1 &&\n            state.whereStates[i + 1].builderType !== BuilderType.WhereGroupEnd\n         ) {\n            sqlHelper.addSqlSnippet(\" \");\n         }\n         continue;\n      }\n\n      if (state.whereStates[i].builderType == BuilderType.WhereExistsBuilder) {\n         sqlHelper.addSqlSnippet(\"EXISTS (\");\n\n         const subHelper = defaultToSql(\n            state.whereStates[i].sqlEasyState,\n            config,\n            mode,\n         );\n\n         sqlHelper.addSqlSnippet(subHelper.getSql());\n         sqlHelper.addSqlSnippet(\")\");\n\n         if (\n            i < state.whereStates.length - 1 &&\n            state.whereStates[i + 1].builderType !== BuilderType.WhereGroupEnd\n         ) {\n            sqlHelper.addSqlSnippet(\" \");\n         }\n         continue;\n      }\n\n      if (state.whereStates[i].builderType == BuilderType.WhereInBuilder) {\n         sqlHelper.addSqlSnippet(\n            config.identifierDelimiters().begin +\n               state.whereStates[i].tableNameOrAlias +\n               config.identifierDelimiters().end,\n         );\n         sqlHelper.addSqlSnippet(\".\");\n         sqlHelper.addSqlSnippet(\n            config.identifierDelimiters().begin +\n               state.whereStates[i].columnName +\n               config.identifierDelimiters().end,\n         );\n         sqlHelper.addSqlSnippet(\" IN (\");\n\n         const subHelper = defaultToSql(\n            state.whereStates[i].sqlEasyState,\n            config,\n            mode,\n         );\n\n         sqlHelper.addSqlSnippet(subHelper.getSql());\n         sqlHelper.addSqlSnippet(\")\");\n\n         if (\n            i < state.whereStates.length - 1 &&\n            state.whereStates[i + 1].builderType !== BuilderType.WhereGroupEnd\n         ) {\n            sqlHelper.addSqlSnippet(\" \");\n         }\n         continue;\n      }\n\n      if (state.whereStates[i].builderType == BuilderType.WhereInValues) {\n         sqlHelper.addSqlSnippet(\n            config.identifierDelimiters().begin +\n               state.whereStates[i].tableNameOrAlias +\n               config.identifierDelimiters().end,\n         );\n         sqlHelper.addSqlSnippet(\".\");\n         sqlHelper.addSqlSnippet(\n            config.identifierDelimiters().begin +\n               state.whereStates[i].columnName +\n               config.identifierDelimiters().end,\n         );\n         sqlHelper.addSqlSnippet(\" IN (\");\n\n         for (let j = 0; j < state.whereStates[i].values.length; j++) {\n            sqlHelper.addSqlSnippet(\n               sqlHelper.addDynamicValue(\n                  state.whereStates[i].values[j],\n               ),\n            );\n\n            if (j < state.whereStates[i].values.length - 1) {\n               sqlHelper.addSqlSnippet(\", \");\n            }\n         }\n\n         sqlHelper.addSqlSnippet(\")\");\n\n         if (\n            i < state.whereStates.length - 1 &&\n            state.whereStates[i + 1].builderType !== BuilderType.WhereGroupEnd\n         ) {\n            sqlHelper.addSqlSnippet(\" \");\n         }\n         continue;\n      }\n\n      if (\n         state.whereStates[i].builderType == BuilderType.WhereNotExistsBuilder\n      ) {\n         sqlHelper.addSqlSnippet(\"NOT EXISTS (\");\n\n         const subHelper = defaultToSql(\n            state.whereStates[i].sqlEasyState,\n            config,\n            mode,\n         );\n\n         sqlHelper.addSqlSnippet(subHelper.getSql());\n         sqlHelper.addSqlSnippet(\")\");\n\n         if (\n            i < state.whereStates.length - 1 &&\n            state.whereStates[i + 1].builderType !== BuilderType.WhereGroupEnd\n         ) {\n            sqlHelper.addSqlSnippet(\" \");\n         }\n         continue;\n      }\n\n      if (state.whereStates[i].builderType == BuilderType.WhereNotInBuilder) {\n         sqlHelper.addSqlSnippet(\n            config.identifierDelimiters().begin +\n               state.whereStates[i].tableNameOrAlias +\n               config.identifierDelimiters().end,\n         );\n         sqlHelper.addSqlSnippet(\".\");\n         sqlHelper.addSqlSnippet(\n            config.identifierDelimiters().begin +\n               state.whereStates[i].columnName +\n               config.identifierDelimiters().end,\n         );\n         sqlHelper.addSqlSnippet(\" NOT IN (\");\n\n         const subHelper = defaultToSql(\n            state.whereStates[i].sqlEasyState,\n            config,\n            mode,\n         );\n\n         sqlHelper.addSqlSnippet(subHelper.getSql());\n         sqlHelper.addSqlSnippet(\")\");\n\n         if (\n            i < state.whereStates.length - 1 &&\n            state.whereStates[i + 1].builderType !== BuilderType.WhereGroupEnd\n         ) {\n            sqlHelper.addSqlSnippet(\" \");\n         }\n         continue;\n      }\n\n      if (state.whereStates[i].builderType == BuilderType.WhereNotInValues) {\n         sqlHelper.addSqlSnippet(\n            config.identifierDelimiters().begin +\n               state.whereStates[i].tableNameOrAlias +\n               config.identifierDelimiters().end,\n         );\n         sqlHelper.addSqlSnippet(\".\");\n         sqlHelper.addSqlSnippet(\n            config.identifierDelimiters().begin +\n               state.whereStates[i].columnName +\n               config.identifierDelimiters().end,\n         );\n         sqlHelper.addSqlSnippet(\" NOT IN (\");\n\n         for (let j = 0; j < state.whereStates[i].values.length; j++) {\n            sqlHelper.addSqlSnippet(sqlHelper.addDynamicValue(\n               state.whereStates[i].values[j],\n            ));\n\n            if (j < state.whereStates[i].values.length - 1) {\n               sqlHelper.addSqlSnippet(\", \");\n            }\n         }\n\n         sqlHelper.addSqlSnippet(\")\");\n\n         if (\n            i < state.whereStates.length - 1 &&\n            state.whereStates[i + 1].builderType !== BuilderType.WhereGroupEnd\n         ) {\n            sqlHelper.addSqlSnippet(\" \");\n         }\n         continue;\n      }\n\n      if (state.whereStates[i].builderType == BuilderType.WhereNotNull) {\n         sqlHelper.addSqlSnippet(\n            config.identifierDelimiters().begin +\n               state.whereStates[i].tableNameOrAlias +\n               config.identifierDelimiters().end,\n         );\n         sqlHelper.addSqlSnippet(\".\");\n         sqlHelper.addSqlSnippet(\n            config.identifierDelimiters().begin +\n               state.whereStates[i].columnName +\n               config.identifierDelimiters().end,\n         );\n         sqlHelper.addSqlSnippet(\" IS NOT NULL\");\n\n         if (\n            i < state.whereStates.length - 1 &&\n            state.whereStates[i + 1].builderType !== BuilderType.WhereGroupEnd\n         ) {\n            sqlHelper.addSqlSnippet(\" \");\n         }\n         continue;\n      }\n\n      if (state.whereStates[i].builderType == BuilderType.WhereNull) {\n         sqlHelper.addSqlSnippet(\n            config.identifierDelimiters().begin +\n               state.whereStates[i].tableNameOrAlias +\n               config.identifierDelimiters().end,\n         );\n         sqlHelper.addSqlSnippet(\".\");\n         sqlHelper.addSqlSnippet(\n            config.identifierDelimiters().begin +\n               state.whereStates[i].columnName +\n               config.identifierDelimiters().end,\n         );\n         sqlHelper.addSqlSnippet(\" IS NULL\");\n\n         if (\n            i < state.whereStates.length - 1 &&\n            state.whereStates[i + 1].builderType !== BuilderType.WhereGroupEnd\n         ) {\n            sqlHelper.addSqlSnippet(\" \");\n         }\n         continue;\n      }\n   }\n\n   return sqlHelper;\n};\n", "import IsHelper from \"@withonevision/is-helper\";\nimport type { IConfiguration } from \"../configuration/interface_configuration.ts\";\nimport type { ParserMode } from \"../enums/parser_mode.ts\";\nimport { SqlHelper } from \"../helpers/sql_helper.ts\";\nimport type { SqlEasyState } from \"../state/sqleasy_state.ts\";\nimport { defaultFrom } from \"./default_from.ts\";\nimport { defaultJoin } from \"./default_join.ts\";\nimport { defaultLimitOffset } from \"./default_limit_offset.ts\";\nimport { defaultOrderBy } from \"./default_order_by.ts\";\nimport { defaultSelect } from \"./default_select.ts\";\nimport { defaultWhere } from \"./default_where.ts\";\nimport { ParserError } from \"../helpers/parser_error.ts\";\nimport { ParserArea } from \"../enums/parser_area.ts\";\n\nexport const defaultToSql = (\n   state: SqlEasyState | undefined,\n   config: IConfiguration,\n   mode: ParserMode,\n): SqlHelper => {\n   const sqlHelper = new SqlHelper(config, mode);\n\n   if (IsHelper.isNullOrUndefined(state)) {\n      throw new ParserError(ParserArea.General, \"No state provided\");\n   }\n\n   const sel = defaultSelect(state, config, mode);\n   sqlHelper.addSqlSnippetWithValues(sel.getSql(), sel.getValues());\n\n   const from = defaultFrom(state, config, mode);\n   sqlHelper.addSqlSnippet(\" \");\n   sqlHelper.addSqlSnippetWithValues(from.getSql(), from.getValues());\n\n   if (state.joinStates.length > 0) {\n      const join = defaultJoin(state, config, mode);\n      sqlHelper.addSqlSnippet(\" \");\n      sqlHelper.addSqlSnippetWithValues(join.getSql(), join.getValues());\n   }\n\n   if (state.whereStates.length > 0) {\n      const where = defaultWhere(state, config, mode);\n      sqlHelper.addSqlSnippet(\" \");\n      sqlHelper.addSqlSnippetWithValues(where.getSql(), where.getValues());\n   }\n\n   if (state.orderByStates.length > 0) {\n      const orderBy = defaultOrderBy(state, config, mode);\n      sqlHelper.addSqlSnippet(\" \");\n      sqlHelper.addSqlSnippetWithValues(orderBy.getSql(), orderBy.getValues());\n   }\n\n   if (state.limit > 0 || state.offset > 0) {\n      const limitOffset = defaultLimitOffset(\n         state,\n         config,\n         mode,\n      );\n\n      sqlHelper.addSqlSnippet(\" \");\n      sqlHelper.addSqlSnippetWithValues(\n         limitOffset.getSql(),\n         limitOffset.getValues(),\n      );\n   }\n\n   if (!state.isInnerStatement) {\n      sqlHelper.addSqlSnippet(\";\");\n   }\n\n   return sqlHelper;\n};\n", "import type { IConfiguration } from \"../configuration/interface_configuration.ts\";\nimport { MultiBuilderTransactionState } from \"../enums/multi_builder_transaction_state.ts\";\nimport { ParserMode } from \"../enums/parser_mode.ts\";\nimport type { SqlEasyState } from \"../state/sqleasy_state.ts\";\nimport { defaultToSql } from \"./default_to_sql.ts\";\n\nexport abstract class DefaultParser {\n   private _config: IConfiguration;\n\n   constructor(config: IConfiguration) {\n      this._config = config;\n   }\n\n   public abstract toSql(\n      state: SqlEasyState,\n   ): string;\n   public abstract toSqlMulti(\n      states: SqlEasyState[],\n      transactionState: MultiBuilderTransactionState,\n   ): string;\n\n   public toSqlRaw = (\n      state: SqlEasyState,\n   ): string => {\n      const sqlHelper = defaultToSql(state, this._config, ParserMode.Raw);\n      return sqlHelper.getSqlDebug();\n   };\n\n   public toSqlMultiRaw = (\n      states: SqlEasyState[],\n      transactionState: MultiBuilderTransactionState,\n   ): string => {\n      let sqlRaw = \"\";\n\n      if (transactionState === MultiBuilderTransactionState.TransactionOn) {\n         sqlRaw += this._config.transactionDelimiters().begin + \"; \";\n      }\n\n      for (const state of states) {\n         const sql = this.toSqlRaw(state);\n         sqlRaw += sql;\n      }\n\n      if (transactionState === MultiBuilderTransactionState.TransactionOn) {\n         sqlRaw += this._config.transactionDelimiters().end + \"; \";\n      }\n\n      return sqlRaw;\n   };\n}\n", "import type { MultiBuilderTransactionState } from \"../../enums/multi_builder_transaction_state.ts\";\nimport { ParserMode } from \"../../enums/parser_mode.ts\";\nimport { SqlHelper } from \"../../helpers/sql_helper.ts\";\nimport { ParserError } from \"../../helpers/parser_error.ts\";\nimport { DefaultParser } from \"../../parser/default_parser.ts\";\nimport { defaultToSql } from \"../../parser/default_to_sql.ts\";\nimport type { SqlEasyState } from \"../../state/sqleasy_state.ts\";\nimport type { MssqlConfiguration } from \"./mssql_configuration.ts\";\n\nexport class MssqlParser extends DefaultParser {\n   private _mssqlConfiguration: MssqlConfiguration;\n\n   constructor(config: MssqlConfiguration) {\n      super(config);\n      this._mssqlConfiguration = config;\n   }\n\n   public override toSql = (\n      state: SqlEasyState,\n   ): string => {\n      const paramsString = new SqlHelper(\n         this._mssqlConfiguration,\n         ParserMode.Prepared,\n      );\n      const finalString = new SqlHelper(\n         this._mssqlConfiguration,\n         ParserMode.Prepared,\n      );\n\n      const sqlHelper = defaultToSql(\n         state,\n         this._mssqlConfiguration,\n         ParserMode.Prepared,\n      );\n\n      let sql = sqlHelper.getSql();\n      sql = sql.replaceAll(\"'\", \"''\");\n\n      if (sql.length > 4000) {\n         throw new ParserError(\n            \"SQL string is too long for Mssql prepared statement\",\n         );\n      }\n\n      let valueCounter: number = 0;\n\n      for (const value of sqlHelper.getValues()) {\n         const valuePosition = sql.indexOf(\n            this._mssqlConfiguration.preparedStatementPlaceholder(),\n         );\n\n         if (valuePosition === -1) {\n            break;\n         }\n\n         sql = sql.slice(0, valuePosition) + \"@p\" + valueCounter +\n            sql.slice(valuePosition + 1);\n\n         if (valueCounter > 0) {\n            paramsString.addSqlSnippet(\", \");\n         }\n\n         paramsString.addSqlSnippet(\n            \"@p\" + valueCounter + \" \" + this.getParameterType(value),\n         );\n\n         valueCounter++;\n      }\n\n      if (paramsString.getSql().length > 4000) {\n         throw new ParserError(\n            \"SQL string is too long for Mssql prepared statement\",\n         );\n      }\n\n      finalString.addSqlSnippet(\"SET NOCOUNT ON; \");\n      finalString.addSqlSnippet(\"exec sp_executesql N'\");\n      finalString.addSqlSnippet(sql);\n      finalString.addSqlSnippet(\"', N'\");\n      finalString.addSqlSnippet(paramsString.getSql());\n      finalString.addSqlSnippet(\"', \");\n\n      for (let i = 0; i < sqlHelper.getValues().length; i++) {\n         if (i > 0) {\n            finalString.addSqlSnippet(\", \");\n         }\n\n         finalString.addSqlSnippet(\n            \"@p\" + i + \" = \" +\n               finalString.getValueStringFromDataType(sqlHelper.getValues()[i]),\n         );\n      }\n\n      finalString.addSqlSnippet(\";\");\n\n      return finalString.getSql();\n   };\n\n   public override toSqlMulti = (\n      _states: SqlEasyState[],\n      _transactionState: MultiBuilderTransactionState,\n   ): string => {\n      throw new ParserError(\n         \"toSqlMulti not implemented for MssqlParser\",\n      );\n   };\n\n   private getParameterType = (value: any): string => {\n      const typeOf = typeof value;\n\n      switch (typeOf) {\n         case \"string\":\n            return \"nvarchar(max)\";\n         case \"number\":\n            if (Number.isInteger(value)) {\n               if (value >= -128 && value <= 127) {\n                  return \"tinyint\";\n               } else if (value >= -32768 && value <= 32767) {\n                  return \"smallint\";\n               } else if (value >= -2147483648 && value <= 2147483647) {\n                  return \"int\";\n               } else {\n                  return \"bigint\";\n               }\n            } else {\n               return \"float\";\n            }\n         case \"boolean\":\n            return \"bit\";\n         default:\n            return \"nvarchar(max)\";\n      }\n   };\n}\n", "import { DefaultBuilder } from \"../../builder/default_builder.ts\";\nimport type { MssqlConfiguration } from \"./mssql_configuration.ts\";\nimport { MssqlJoinOnBuilder } from \"./mssql_join_on_builder.ts\";\nimport { MssqlParser } from \"./mssql_parser.ts\";\n\nexport class MssqlBuilder\n   extends DefaultBuilder<MssqlBuilder, MssqlJoinOnBuilder, MssqlParser> {\n   private _mssqlConfig: MssqlConfiguration;\n\n   constructor(config: MssqlConfiguration) {\n      super(config);\n      this._mssqlConfig = config;\n   }\n\n   public override newBuilder = (): MssqlBuilder => {\n      return new MssqlBuilder(this._mssqlConfig);\n   };\n\n   public override newJoinOnBuilder = (): MssqlJoinOnBuilder => {\n      return new MssqlJoinOnBuilder(this._mssqlConfig);\n   };\n\n   public override newParser = (): MssqlParser => {\n      return new MssqlParser(this._mssqlConfig);\n   };\n\n   public clearTop = (): MssqlBuilder => {\n      delete this.state().customState[\"top\"];\n      return this;\n   };\n\n   public top = (top: number): MssqlBuilder => {\n      this.state().customState[\"top\"] = top;\n      return this;\n   };\n}\n", "import type { RuntimeConfiguration } from \"../../configuration/runtime_configuration.ts\";\nimport { DatabaseType } from \"../../enums/database_type.ts\";\nimport type { ConfigurationDelimiters } from \"../../configuration/configuration_delimiters.ts\";\nimport type { IConfiguration } from \"../../configuration/interface_configuration.ts\";\n\nexport class MssqlConfiguration implements IConfiguration {\n   private _mssqlRuntimeConfiguration: RuntimeConfiguration;\n\n   constructor(rc: RuntimeConfiguration) {\n      this._mssqlRuntimeConfiguration = rc;\n   }\n\n   public databaseType = (): DatabaseType => {\n      return DatabaseType.Mssql;\n   };\n\n   public defaultOwner = (): string => {\n      return \"dbo\";\n   };\n\n   public identifierDelimiters = (): ConfigurationDelimiters => {\n      return {\n         begin: \"[\",\n         end: \"]\",\n      };\n   };\n\n   public preparedStatementPlaceholder = (): string => {\n      return \"?\";\n   };\n\n   public runtimeConfiguration = (): RuntimeConfiguration => {\n      return this._mssqlRuntimeConfiguration;\n   };\n\n   public stringDelimiter = (): string => {\n      return \"'\";\n   };\n\n   public transactionDelimiters = (): ConfigurationDelimiters => {\n      return {\n         begin: \"BEGIN TRANSACTION\",\n         end: \"COMMIT TRANSACTION\",\n      };\n   };\n}\n", "import { DefaultMultiBuilder } from \"../../builder/default_multi_builder.ts\";\nimport { MssqlBuilder } from \"./mssql_builder.ts\";\nimport type { MssqlConfiguration } from \"./mssql_configuration.ts\";\nimport type { MssqlJoinOnBuilder } from \"./mssql_join_on_builder.ts\";\nimport { MssqlParser } from \"./mssql_parser.ts\";\n\nexport class MssqlMultiBuilder\n   extends DefaultMultiBuilder<MssqlBuilder, MssqlJoinOnBuilder, MssqlParser> {\n   private _mssqlConfiguration: MssqlConfiguration;\n\n   constructor(config: MssqlConfiguration) {\n      super(config);\n      this._mssqlConfiguration = config;\n   }\n\n   public override newBuilder = (): MssqlBuilder => {\n      return new MssqlBuilder(this._mssqlConfiguration);\n   };\n\n   public override newParser = (): MssqlParser => {\n      return new MssqlParser(this._mssqlConfiguration);\n   };\n}\n", "import { RuntimeConfiguration } from \"../../configuration/runtime_configuration.ts\";\nimport { MssqlBuilder } from \"./mssql_builder.ts\";\nimport { MssqlConfiguration } from \"./mssql_configuration.ts\";\nimport type { MssqlJoinOnBuilder } from \"./mssql_join_on_builder.ts\";\nimport { MssqlMultiBuilder } from \"./mssql_multi_builder.ts\";\nimport type { ISqlEasy } from \"../interface_sqleasy.ts\";\nimport IsHelper from \"@withonevision/is-helper\";\n\nexport class MssqlSqlEasy implements\n   ISqlEasy<\n      MssqlBuilder,\n      MssqlJoinOnBuilder,\n      MssqlMultiBuilder\n   > {\n   private _mssqlConfiguration: MssqlConfiguration;\n\n   constructor(rc?: RuntimeConfiguration) {\n      if (IsHelper.isNullOrUndefined(rc)) {\n         rc = new RuntimeConfiguration();\n      }\n\n      this._mssqlConfiguration = new MssqlConfiguration(rc);\n   }\n\n   public configuration = (): MssqlConfiguration => {\n      return this._mssqlConfiguration;\n   };\n\n   public newBuilder = (rc?: RuntimeConfiguration): MssqlBuilder => {\n      if (IsHelper.isNullOrUndefined(rc)) {\n         return new MssqlBuilder(this._mssqlConfiguration);\n      }\n\n      return new MssqlBuilder(new MssqlConfiguration(rc));\n   };\n\n   public newMultiBuilder = (rc?: RuntimeConfiguration): MssqlMultiBuilder => {\n      if (IsHelper.isNullOrUndefined(rc)) {\n         return new MssqlMultiBuilder(\n            this._mssqlConfiguration,\n         );\n      }\n\n      return new MssqlMultiBuilder(new MssqlConfiguration(rc));\n   };\n}\n", "import { DefaultJoinOnBuilder } from \"../../builder/default_join_on_builder.ts\";\nimport type { MysqlConfiguration } from \"./mysql_configuration.ts\";\n\nexport class MysqlJoinOnBuilder\n   extends DefaultJoinOnBuilder<MysqlJoinOnBuilder> {\n   private _mysqlConfig: MysqlConfiguration;\n\n   constructor(config: MysqlConfiguration) {\n      super(config);\n      this._mysqlConfig = config;\n   }\n\n   public override newJoinOnBuilder = (): MysqlJoinOnBuilder => {\n      return new MysqlJoinOnBuilder(this._mysqlConfig);\n   };\n}\n", "import type { MultiBuilderTransactionState } from \"../../enums/multi_builder_transaction_state.ts\";\nimport { ParserError } from \"../../helpers/parser_error.ts\";\nimport { DefaultParser } from \"../../parser/default_parser.ts\";\nimport type { SqlEasyState } from \"../../state/sqleasy_state.ts\";\nimport type { MysqlConfiguration } from \"./mysql_configuration.ts\";\n\nexport class MysqlParser extends DefaultParser {\n   private _mysqlConfiguration: MysqlConfiguration;\n\n   constructor(config: MysqlConfiguration) {\n      super(config);\n      this._mysqlConfiguration = config;\n   }\n\n   public override toSql = (\n      _state: SqlEasyState,\n   ): string => {\n      throw new ParserError(\"toSql not implemented for MysqlParser\");\n   };\n\n   public override toSqlMulti = (\n      _states: SqlEasyState[],\n      _transactionState: MultiBuilderTransactionState,\n   ): string => {\n      throw new ParserError(\n         \"toSqlMulti not implemented for MysqlParser\",\n      );\n   };\n}\n", "import { DefaultBuilder } from \"../../builder/default_builder.ts\";\nimport type { MysqlConfiguration } from \"./mysql_configuration.ts\";\nimport { MysqlJoinOnBuilder } from \"./mysql_join_on_builder.ts\";\nimport { MysqlParser } from \"./mysql_parser.ts\";\n\nexport class MysqlBuilder\n   extends DefaultBuilder<MysqlBuilder, MysqlJoinOnBuilder, MysqlParser> {\n   private _mysqlConfig: MysqlConfiguration;\n\n   constructor(config: MysqlConfiguration) {\n      super(config);\n      this._mysqlConfig = config;\n   }\n\n   public override newBuilder = (): MysqlBuilder => {\n      return new MysqlBuilder(this._mysqlConfig);\n   };\n\n   public override newJoinOnBuilder = (): MysqlJoinOnBuilder => {\n      return new MysqlJoinOnBuilder(this._mysqlConfig);\n   };\n\n   public override newParser = (): MysqlParser => {\n      return new MysqlParser(this._mysqlConfig);\n   };\n}\n", "import type { ConfigurationDelimiters } from \"../../configuration/configuration_delimiters.ts\";\nimport type { IConfiguration } from \"../../configuration/interface_configuration.ts\";\nimport type { RuntimeConfiguration } from \"../../configuration/runtime_configuration.ts\";\nimport { DatabaseType } from \"../../enums/database_type.ts\";\n\nexport class MysqlConfiguration implements IConfiguration {\n   private _mysqlRuntimeConfiguration: RuntimeConfiguration;\n\n   constructor(rc: RuntimeConfiguration) {\n      this._mysqlRuntimeConfiguration = rc;\n   }\n\n   public databaseType = (): DatabaseType => {\n      return DatabaseType.Mysql;\n   };\n\n   public defaultOwner = (): string => {\n      return \"\";\n   };\n\n   public identifierDelimiters = (): ConfigurationDelimiters => {\n      return {\n         begin: \"`\",\n         end: \"`\",\n      };\n   };\n\n   public preparedStatementPlaceholder = (): string => {\n      return \"?\";\n   };\n\n   public runtimeConfiguration = (): RuntimeConfiguration => {\n      return this._mysqlRuntimeConfiguration;\n   };\n\n   public stringDelimiter = (): string => {\n      return \"'\";\n   };\n\n   public transactionDelimiters = (): ConfigurationDelimiters => {\n      return {\n         begin: \"START TRANSACTION\",\n         end: \"COMMIT\",\n      };\n   };\n}\n", "import { DefaultMultiBuilder } from \"../../builder/default_multi_builder.ts\";\nimport { MysqlBuilder } from \"./mysql_builder.ts\";\nimport type { MysqlConfiguration } from \"./mysql_configuration.ts\";\nimport type { MysqlJoinOnBuilder } from \"./mysql_join_on_builder.ts\";\nimport { MysqlParser } from \"./mysql_parser.ts\";\n\nexport class MysqlMultiBuilder\n   extends DefaultMultiBuilder<MysqlBuilder, MysqlJoinOnBuilder, MysqlParser> {\n   private _mysqlConfig: MysqlConfiguration;\n\n   constructor(config: MysqlConfiguration) {\n      super(config);\n      this._mysqlConfig = config;\n   }\n\n   public override newBuilder = (): MysqlBuilder => {\n      return new MysqlBuilder(this._mysqlConfig);\n   };\n\n   public override newParser = (): MysqlParser => {\n      return new MysqlParser(this._mysqlConfig);\n   };\n}\n", "import { RuntimeConfiguration } from \"../../configuration/runtime_configuration.ts\";\nimport { MysqlBuilder } from \"./mysql_builder.ts\";\nimport { MysqlConfiguration } from \"./mysql_configuration.ts\";\nimport type { MysqlJoinOnBuilder } from \"./mysql_join_on_builder.ts\";\nimport { MysqlMultiBuilder } from \"./mysql_multi_builder.ts\";\nimport type { ISqlEasy } from \"../interface_sqleasy.ts\";\nimport IsHelper from \"@withonevision/is-helper\";\n\nexport class MysqlSqlEasy implements\n   ISqlEasy<\n      MysqlBuilder,\n      MysqlJoinOnBuilder,\n      MysqlMultiBuilder\n   > {\n   private _mssqlConfiguration: MysqlConfiguration;\n\n   constructor(rc?: RuntimeConfiguration) {\n      if (IsHelper.isNullOrUndefined(rc)) {\n         rc = new RuntimeConfiguration();\n      }\n\n      this._mssqlConfiguration = new MysqlConfiguration(rc);\n   }\n\n   public configuration = (): MysqlConfiguration => {\n      return this._mssqlConfiguration;\n   };\n\n   public newBuilder = (rc?: RuntimeConfiguration): MysqlBuilder => {\n      if (IsHelper.isNullOrUndefined(rc)) {\n         return new MysqlBuilder(this._mssqlConfiguration);\n      }\n\n      return new MysqlBuilder(new MysqlConfiguration(rc));\n   };\n\n   public newMultiBuilder = (rc?: RuntimeConfiguration): MysqlMultiBuilder => {\n      if (IsHelper.isNullOrUndefined(rc)) {\n         return new MysqlMultiBuilder(\n            this._mssqlConfiguration,\n         );\n      }\n\n      return new MysqlMultiBuilder(new MysqlConfiguration(rc));\n   };\n}\n", "import { DefaultJoinOnBuilder } from \"../../builder/default_join_on_builder.ts\";\nimport type { PostgresConfiguration } from \"./postgres_configuration.ts\";\n\nexport class PostgresJoinOnBuilder\n   extends DefaultJoinOnBuilder<PostgresJoinOnBuilder> {\n   private _postgresConfig: PostgresConfiguration;\n\n   constructor(config: PostgresConfiguration) {\n      super(config);\n      this._postgresConfig = config;\n   }\n\n   public override newJoinOnBuilder = (): PostgresJoinOnBuilder => {\n      return new PostgresJoinOnBuilder(this._postgresConfig);\n   };\n}\n", "import type { MultiBuilderTransactionState } from \"../../enums/multi_builder_transaction_state.ts\";\nimport { ParserError } from \"../../helpers/parser_error.ts\";\nimport { DefaultParser } from \"../../parser/default_parser.ts\";\nimport type { SqlEasyState } from \"../../state/sqleasy_state.ts\";\nimport type { PostgresConfiguration } from \"./postgres_configuration.ts\";\n\nexport class PostgresParser extends DefaultParser {\n   private _postgresConfiguration: PostgresConfiguration;\n\n   constructor(config: PostgresConfiguration) {\n      super(config);\n      this._postgresConfiguration = config;\n   }\n\n   public override toSql = (\n      _state: SqlEasyState,\n   ): string => {\n      throw new ParserError(\"toSql not implemented for PostgresParser\");\n   };\n\n   public override toSqlMulti = (\n      _states: SqlEasyState[],\n      _transactionState: MultiBuilderTransactionState,\n   ): string => {\n      throw new ParserError(\n         \"toSqlMulti not implemented for PostgresParser\",\n      );\n   };\n}\n", "import { DefaultBuilder } from \"../../builder/default_builder.ts\";\nimport type { PostgresConfiguration } from \"./postgres_configuration.ts\";\nimport { PostgresJoinOnBuilder } from \"./postgres_join_on_builder.ts\";\nimport { PostgresParser } from \"./postgres_parser.ts\";\n\nexport class PostgresBuilder extends DefaultBuilder<\n   PostgresBuilder,\n   PostgresJoinOnBuilder,\n   PostgresParser\n> {\n   private _postgresConfig: PostgresConfiguration;\n\n   constructor(config: PostgresConfiguration) {\n      super(config);\n      this._postgresConfig = config;\n   }\n\n   public override newBuilder = (): PostgresBuilder => {\n      return new PostgresBuilder(this._postgresConfig);\n   };\n\n   public override newJoinOnBuilder = (): PostgresJoinOnBuilder => {\n      return new PostgresJoinOnBuilder(this._postgresConfig);\n   };\n\n   public override newParser = (): PostgresParser => {\n      return new PostgresParser(this._postgresConfig);\n   };\n}\n", "import type { ConfigurationDelimiters } from \"../../configuration/configuration_delimiters.ts\";\nimport type { IConfiguration } from \"../../configuration/interface_configuration.ts\";\nimport type { RuntimeConfiguration } from \"../../configuration/runtime_configuration.ts\";\nimport { DatabaseType } from \"../../enums/database_type.ts\";\n\nexport class PostgresConfiguration implements IConfiguration {\n   private _postgresRuntimeConfiguration: RuntimeConfiguration;\n\n   constructor(rc: RuntimeConfiguration) {\n      this._postgresRuntimeConfiguration = rc;\n   }\n\n   public databaseType = (): DatabaseType => {\n      return DatabaseType.Postgres;\n   };\n\n   public defaultOwner = (): string => {\n      return \"public\";\n   };\n\n   public identifierDelimiters = (): ConfigurationDelimiters => {\n      return {\n         begin: '\"',\n         end: '\"',\n      };\n   };\n\n   public preparedStatementPlaceholder = (): string => {\n      return \"$\";\n   };\n\n   public runtimeConfiguration = (): RuntimeConfiguration => {\n      return this._postgresRuntimeConfiguration;\n   };\n\n   public stringDelimiter = (): string => {\n      return \"'\";\n   };\n\n   public transactionDelimiters = (): ConfigurationDelimiters => {\n      return {\n         begin: \"BEGIN\",\n         end: \"COMMIT\",\n      };\n   };\n}\n", "import { DefaultMultiBuilder } from \"../../builder/default_multi_builder.ts\";\nimport { PostgresBuilder } from \"./postgres_builder.ts\";\nimport type { PostgresConfiguration } from \"./postgres_configuration.ts\";\nimport type { PostgresJoinOnBuilder } from \"./postgres_join_on_builder.ts\";\nimport { PostgresParser } from \"./postgres_parser.ts\";\n\nexport class PostgresMultiBuilder extends DefaultMultiBuilder<\n   PostgresBuilder,\n   PostgresJoinOnBuilder,\n   PostgresParser\n> {\n   private _postgresConfig: PostgresConfiguration;\n\n   constructor(config: PostgresConfiguration) {\n      super(config);\n      this._postgresConfig = config;\n   }\n\n   public override newBuilder = (): PostgresBuilder => {\n      return new PostgresBuilder(this._postgresConfig);\n   };\n\n   public override newParser = (): PostgresParser => {\n      return new PostgresParser(this._postgresConfig);\n   };\n}\n", "import { RuntimeConfiguration } from \"../../configuration/runtime_configuration.ts\";\nimport { PostgresBuilder } from \"./postgres_builder.ts\";\nimport { PostgresConfiguration } from \"./postgres_configuration.ts\";\nimport type { PostgresJoinOnBuilder } from \"./postgres_join_on_builder.ts\";\nimport { PostgresMultiBuilder } from \"./postgres_multi_builder.ts\";\nimport type { ISqlEasy } from \"../interface_sqleasy.ts\";\nimport IsHelper from \"@withonevision/is-helper\";\n\nexport class PostgresSqlEasy implements\n   ISqlEasy<\n      PostgresBuilder,\n      PostgresJoinOnBuilder,\n      PostgresMultiBuilder\n   > {\n   private _postgresConfig: PostgresConfiguration;\n\n   constructor(rc?: RuntimeConfiguration) {\n      if (IsHelper.isNullOrUndefined(rc)) {\n         rc = new RuntimeConfiguration();\n      }\n\n      this._postgresConfig = new PostgresConfiguration(rc);\n   }\n\n   public configuration = (): PostgresConfiguration => {\n      return this._postgresConfig;\n   };\n\n   public newBuilder = (rc?: RuntimeConfiguration): PostgresBuilder => {\n      if (IsHelper.isNullOrUndefined(rc)) {\n         return new PostgresBuilder(this._postgresConfig);\n      }\n\n      return new PostgresBuilder(new PostgresConfiguration(rc));\n   };\n\n   public newMultiBuilder = (\n      rc?: RuntimeConfiguration,\n   ): PostgresMultiBuilder => {\n      if (IsHelper.isNullOrUndefined(rc)) {\n         return new PostgresMultiBuilder(\n            this._postgresConfig,\n         );\n      }\n\n      return new PostgresMultiBuilder(\n         new PostgresConfiguration(rc),\n      );\n   };\n}\n", "import { BuilderType } from \"../enums/builder_type.ts\";\nimport type { SqlEasyState } from \"./sqleasy_state.ts\";\n\nexport class FromState {\n   builderType: BuilderType = BuilderType.None;\n   owner: string | undefined = undefined;\n   tableName: string | undefined = undefined;\n   alias: string | undefined = undefined;\n   sqlEasyState: SqlEasyState | undefined = undefined;\n   raw: string | undefined = undefined;\n}\n", "import { JoinOnOperator } from \"../enums/join_on_operator.ts\";\nimport { JoinOperator } from \"../enums/join_operator.ts\";\n\nexport class JoinOnState {\n   aliasLeft: string | undefined = undefined;\n   columnLeft: string | undefined = undefined;\n   joinOperator: JoinOperator = JoinOperator.Equals;\n   aliasRight: string | undefined = undefined;\n   columnRight: string | undefined = undefined;\n   joinOnOperator: JoinOnOperator = JoinOnOperator.None;\n   raw: string | undefined = undefined;\n   valueRight: any | undefined = undefined;\n}\n", "import { BuilderType } from \"../enums/builder_type.ts\";\nimport { JoinType } from \"../enums/join_type.ts\";\nimport type { JoinOnState } from \"./join_on_state.ts\";\nimport type { SqlEasyState } from \"./sqleasy_state.ts\";\n\nexport class JoinState {\n   builderType: BuilderType = BuilderType.None;\n   joinType: JoinType = JoinType.Inner;\n   owner: string | undefined = undefined;\n   tableName: string | undefined = undefined;\n   alias: string | undefined = undefined;\n   sqlEasyState: SqlEasyState | undefined = undefined;\n   raw: string | undefined = undefined;\n   joinOnStates: JoinOnState[] = [];\n}\n", "import { BuilderType } from \"../enums/builder_type.ts\";\nimport { OrderByDirection } from \"../enums/order_by_direction.ts\";\n\nexport class OrderByState {\n   builderType: BuilderType = BuilderType.None;\n   tableNameOrAlias: string | undefined = undefined;\n   columnName: string | undefined = undefined;\n   direction: OrderByDirection = OrderByDirection.None;\n   raw: string | undefined = undefined;\n}\n", "import { BuilderType } from \"../enums/builder_type.ts\";\nimport type { SqlEasyState } from \"./sqleasy_state.ts\";\n\nexport class SelectState {\n   builderType: BuilderType = BuilderType.None;\n   tableNameOrAlias: string | undefined = undefined;\n   columnName: string | undefined = undefined;\n   alias: string | undefined = undefined;\n   sqlEasyState: SqlEasyState | undefined = undefined;\n   raw: string | undefined = undefined;\n}\n", "import { BuilderType } from \"../enums/builder_type.ts\";\nimport { WhereOperator } from \"../enums/where_operator.ts\";\nimport type { SqlEasyState } from \"./sqleasy_state.ts\";\n\nexport class WhereState {\n   builderType: BuilderType = BuilderType.None;\n   tableNameOrAlias: string | undefined = undefined;\n   columnName: string | undefined = undefined;\n   whereOperator: WhereOperator = WhereOperator.None;\n   raw: string | undefined = undefined;\n   sqlEasyState: SqlEasyState | undefined = undefined;\n   values: any[] = [];\n}\n"],
  "mappings": "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",
  "names": ["BuilderType", "JoinType", "OrderByDirection", "WhereOperator", "SqlEasyState", "DefaultBuilder", "SqlEasyState", "config", "rawFrom", "rawFroms", "tableName", "alias", "tables", "table", "owner", "builder", "newBuilder", "rawJoin", "rawJoins", "joinType", "joinOnBuilder", "joinOnBuilderInstance", "joins", "join", "newJoinOnBuilder", "limit", "offset", "tableNameOrAlias", "columnName", "direction", "columns", "column", "rawOrderBy", "rawOrderBys", "columnAlias", "rawSelect", "rawSelects", "whereOperator", "value", "value1", "value2", "values", "rawWhere", "rawWheres", "JoinOnOperator", "JoinOperator", "DefaultJoinOnBuilder", "config", "aliasLeft", "columnLeft", "joinOperator", "aliasRight", "columnRight", "builder", "newBuilder", "raw", "valueRight", "MultiBuilderTransactionState", "DefaultMultiBuilder", "config", "builderName", "newBuilder", "state", "builderNames", "newStates", "transactionState", "ConfigurationDelimiters", "RuntimeConfiguration", "DatabaseType", "Datatype", "ParserMode", "IsHelper", "_IsHelper", "value", "prototype", "StringBuilder", "value", "SqlHelper", "StringBuilder", "config", "parserMode", "value", "sql", "sqlString", "valuePosition", "IsHelper", "ParserError", "parserArea", "message", "finalMessage", "MssqlJoinOnBuilder", "_MssqlJoinOnBuilder", "DefaultJoinOnBuilder", "config", "defaultFrom", "state", "config", "mode", "sqlHelper", "SqlHelper", "ParserError", "fromState", "i", "subHelper", "defaultToSql", "defaultJoin", "state", "config", "mode", "sqlHelper", "SqlHelper", "i", "joinState", "defaultJoinOns", "subHelper", "defaultToSql", "joinOnStates", "ParserError", "defaultLimitOffset", "state", "config", "mode", "sqlHelper", "SqlHelper", "IsHelper", "ParserError", "defaultOrderBy", "state", "config", "mode", "sqlHelper", "SqlHelper", "orderByState", "i", "defaultSelect", "state", "config", "mode", "sqlHelper", "SqlHelper", "ParserError", "IsHelper", "i", "selectState", "subHelper", "defaultToSql", "defaultWhere", "state", "config", "mode", "sqlHelper", "SqlHelper", "i", "ParserError", "subHelper", "defaultToSql", "j", "defaultToSql", "state", "config", "mode", "sqlHelper", "SqlHelper", "IsHelper", "ParserError", "sel", "defaultSelect", "from", "defaultFrom", "join", "defaultJoin", "where", "defaultWhere", "orderBy", "defaultOrderBy", "limitOffset", "defaultLimitOffset", "DefaultParser", "config", "state", "defaultToSql", "states", "transactionState", "sqlRaw", "sql", "MssqlParser", "DefaultParser", "config", "state", "paramsString", "SqlHelper", "finalString", "sqlHelper", "defaultToSql", "sql", "ParserError", "valueCounter", "value", "valuePosition", "i", "_states", "_transactionState", "MssqlBuilder", "_MssqlBuilder", "DefaultBuilder", "config", "MssqlJoinOnBuilder", "MssqlParser", "top", "MssqlConfiguration", "rc", "MssqlMultiBuilder", "DefaultMultiBuilder", "config", "MssqlBuilder", "MssqlParser", "MssqlSqlEasy", "rc", "IsHelper", "RuntimeConfiguration", "MssqlConfiguration", "MssqlBuilder", "MssqlMultiBuilder", "MysqlJoinOnBuilder", "_MysqlJoinOnBuilder", "DefaultJoinOnBuilder", "config", "MysqlParser", "DefaultParser", "config", "_state", "ParserError", "_states", "_transactionState", "MysqlBuilder", "_MysqlBuilder", "DefaultBuilder", "config", "MysqlJoinOnBuilder", "MysqlParser", "MysqlConfiguration", "rc", "MysqlMultiBuilder", "DefaultMultiBuilder", "config", "MysqlBuilder", "MysqlParser", "MysqlSqlEasy", "rc", "IsHelper", "RuntimeConfiguration", "MysqlConfiguration", "MysqlBuilder", "MysqlMultiBuilder", "PostgresJoinOnBuilder", "_PostgresJoinOnBuilder", "DefaultJoinOnBuilder", "config", "PostgresParser", "DefaultParser", "config", "_state", "ParserError", "_states", "_transactionState", "PostgresBuilder", "_PostgresBuilder", "DefaultBuilder", "config", "PostgresJoinOnBuilder", "PostgresParser", "PostgresConfiguration", "rc", "PostgresMultiBuilder", "DefaultMultiBuilder", "config", "PostgresBuilder", "PostgresParser", "PostgresSqlEasy", "rc", "IsHelper", "RuntimeConfiguration", "PostgresConfiguration", "PostgresBuilder", "PostgresMultiBuilder", "FromState", "JoinOnState", "JoinState", "OrderByState", "SelectState", "WhereState"]
}
